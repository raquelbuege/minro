// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project a8d1bf1754323587 "Xtract Template (copy)", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
}} Props

 */

/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */
import {
	className as className2,
	css as css2,
	fonts as fonts2,
} from "./chunks/chunk-65IXOGL7.js";
import { className, css, fonts } from "./chunks/chunk-OHXJNQ4I.js";
import { Icon } from "./chunks/chunk-IXDMRUES.js";
import "./chunks/chunk-BVM6H744.js";
import { routes } from "./chunks/chunk-A46GJBWP.js";

// virtual:sales-and-markteing
import { Fragment as Fragment3 } from "react";
import { ContextProviders } from "unframer";

// /:https://framer.com/m/sales-and-markteing-dHXg.js
import { jsx as _jsx3, jsxs as _jsxs3 } from "react/jsx-runtime";
import {
	addFonts as addFonts2,
	ComponentViewportProvider,
	cx as cx2,
	getFonts,
	getFontsFromSharedStyle,
	RichText,
	SmartComponentScopedContainer,
	SVG,
	useComponentViewport as useComponentViewport2,
	useLocaleInfo as useLocaleInfo2,
	useVariantState as useVariantState2,
	withCSS as withCSS2,
	withFX,
} from "unframer";
import {
	LayoutGroup as LayoutGroup3,
	motion as motion3,
	MotionConfigContext as MotionConfigContext2,
} from "unframer";
import * as React2 from "react";
import { useRef as useRef3 } from "react";

// /:https://framerusercontent.com/modules/zvkTOpMSuRzRhLzZZIwG/vzgdvq3ezmf3RWurtT17/SlideShow.js
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { resize } from "@motionone/dom";
import { addPropertyControls, ControlType, RenderTarget } from "unframer";
import {
	animate,
	LayoutGroup,
	mix,
	motion,
	frame,
	useInView,
	useMotionValue,
	useTransform,
	wrap,
} from "unframer";
import {
	Children,
	cloneElement,
	forwardRef,
	memo,
	startTransition,
	useCallback,
	useEffect as useEffect2,
	useLayoutEffect,
	useMemo,
	useRef,
	useState as useState2,
} from "react";

// /:https://framerusercontent.com/modules/V9ryrjN5Am9WM1dJeyyJ/GzHgU466IQmt8g4qOKj8/UsePageVisibility.js
import { useState, useEffect } from "react";
var isBrowser = () => typeof document === "object";
function usePageVisibility() {
	if (!isBrowser()) return;
	const [isVisible, setIsVisible] = useState(!document.hidden);
	useEffect(() => {
		const onVisibilityChange = () => setIsVisible(!document.hidden);
		document.addEventListener("visibilitychange", onVisibilityChange, false);
		return () => {
			document.removeEventListener("visibilitychange", onVisibilityChange);
		};
	}, []);
	return isVisible;
}

// /:https://framerusercontent.com/modules/zvkTOpMSuRzRhLzZZIwG/vzgdvq3ezmf3RWurtT17/SlideShow.js
function awaitRefCallback(element, controller) {
	let refCallbackResolve;
	let current = element.current;
	Object.defineProperty(element, "current", {
		get() {
			return current;
		},
		set(node) {
			current = node;
			if (node === null) {
				controller.abort();
				return;
			}
			refCallbackResolve?.(node);
		},
		configurable: true,
	});
	if (current) return current;
	const refCallbackPromise = new Promise((resolve, reject) => {
		refCallbackResolve = resolve;
		controller.signal.addEventListener("abort", reject);
	}).catch(() => {});
	return refCallbackPromise;
}
var OPACITY_0 = 1e-3;
function Slideshow(props) {
	const {
		slots = [],
		startFrom,
		direction,
		effectsOptions,
		autoPlayControl,
		dragControl,
		alignment,
		gap,
		padding,
		paddingPerSide,
		paddingTop,
		paddingRight,
		paddingBottom,
		paddingLeft,
		itemAmount,
		fadeOptions,
		intervalControl,
		transitionControl,
		arrowOptions,
		borderRadius,
		progressOptions,
		style,
	} = props;
	const {
		effectsOpacity,
		effectsScale,
		effectsRotate,
		effectsPerspective,
		effectsHover,
		playOffscreen,
	} = effectsOptions;
	const { fadeContent, overflow, fadeWidth, fadeInset, fadeAlpha } =
		fadeOptions;
	const {
		showMouseControls,
		arrowSize,
		arrowRadius,
		arrowFill,
		leftArrow,
		rightArrow,
		arrowShouldSpace = true,
		arrowShouldFadeIn = false,
		arrowPosition,
		arrowPadding,
		arrowGap,
		arrowPaddingTop,
		arrowPaddingRight,
		arrowPaddingBottom,
		arrowPaddingLeft,
	} = arrowOptions;
	const {
		showProgressDots,
		dotSize,
		dotsInset,
		dotsRadius,
		dotsPadding,
		dotsGap,
		dotsFill,
		dotsBackground,
		dotsActiveOpacity,
		dotsOpacity,
		dotsBlur,
	} = progressOptions;
	const paddingValue = paddingPerSide
		? `${paddingTop}px ${paddingRight}px ${paddingBottom}px ${paddingLeft}px`
		: `${padding}px`;
	const isCanvas = RenderTarget.current() === RenderTarget.canvas;
	const filteredSlots = slots.filter(Boolean);
	const amountChildren = Children.count(filteredSlots);
	const hasChildren = amountChildren > 0;
	const isHorizontal = direction === "left" || direction === "right";
	const isInverted = direction === "right" || direction === "bottom";
	if (!hasChildren) {
		return (
			<section style={placeholderStyles}>
				<div style={emojiStyles}>{"\u2B50\uFE0F"}</div>
				<p style={titleStyles}>{"Connect to Content"}</p>
				<p style={subtitleStyles}>
					{"Add layers or components to make infinite auto-playing slideshows."}
				</p>
			</section>
		);
	}
	const parentRef = useRef(null);
	const childrenRef = useMemo(() => {
		return [
			{
				current: null,
			},
			{
				current: null,
			},
		];
	}, [filteredSlots]);
	const timeoutRef = useRef(void 0);
	const [size, setSize] = useState2({
		parent: null,
		children: null,
		item: null,
		itemWidth: null,
		itemHeight: null,
		viewportLength: null,
	});
	const [isHovering, setIsHovering] = useState2(false);
	const [shouldPlayOnHover, setShouldPlayOnHover] = useState2(autoPlayControl);
	const [isMouseDown, setIsMouseDown] = useState2(false);
	const [isResizing, setIsResizing] = useState2(false);
	let dupedChildren = [];
	let duplicateBy = 4;
	if (isCanvas) {
		duplicateBy = 1;
	}
	const measure = useCallback(() => {
		if (!parentRef.current) return;
		const firstChild = childrenRef[0].current;
		const lastChild = childrenRef[1].current;
		const parentLength = isHorizontal
			? parentRef.current.offsetWidth
			: parentRef.current.offsetHeight;
		const start = firstChild
			? isHorizontal
				? firstChild.offsetLeft
				: firstChild.offsetTop
			: 0;
		const end = lastChild
			? isHorizontal
				? lastChild.offsetLeft + lastChild.offsetWidth
				: lastChild.offsetTop + lastChild.offsetHeight
			: 0;
		const childrenLength = end - start + gap;
		const itemSize = firstChild
			? isHorizontal
				? firstChild.offsetWidth
				: firstChild.offsetHeight
			: 0;
		const itemWidth = firstChild ? firstChild.offsetWidth : 0;
		const itemHeight = firstChild ? firstChild.offsetHeight : 0;
		const viewportLength = isHorizontal
			? Math.max(
					document.documentElement.clientWidth || 0,
					window.innerWidth || 0,
					parentRef.current.offsetWidth,
				)
			: Math.max(
					document.documentElement.clientHeight || 0,
					window.innerHeight || 0,
					parentRef.current.offsetHeight,
				);
		setSize({
			parent: parentLength,
			children: childrenLength,
			item: itemSize,
			itemWidth,
			itemHeight,
			viewportLength,
		});
	}, []);
	const scheduleMeasure = useCallback(async () => {
		const controller = new AbortController();
		const [firstChild, lastChild] = childrenRef;
		if (!isCanvas && (!firstChild.current || !lastChild.current))
			try {
				await Promise.all([
					awaitRefCallback(firstChild, controller),
					amountChildren > 1 ? awaitRefCallback(lastChild, controller) : true,
				]);
			} catch {
				controller.abort();
			}
		frame.read(measure, false, true);
	}, [measure]);
	useLayoutEffect(() => {
		scheduleMeasure();
	}, [itemAmount]);
	const initialResize = useRef(true);
	useEffect2(() => {
		return resize(parentRef.current, ({ contentSize }) => {
			if (!initialResize.current && (contentSize.width || contentSize.height)) {
				scheduleMeasure();
				startTransition(() => setIsResizing(true));
			}
			initialResize.current = false;
		});
	}, []);
	useEffect2(() => {
		if (isResizing) {
			const timer = setTimeout(
				() => startTransition(() => setIsResizing(false)),
				500,
			);
			return () => clearTimeout(timer);
		}
	}, [isResizing]);
	const totalItems = filteredSlots?.length;
	const childrenSize = isCanvas ? 0 : size?.children;
	const itemWithGap = size?.item + gap;
	const itemOffset = startFrom * itemWithGap;
	const [currentItem, setCurrentItem] = useState2(startFrom + totalItems);
	const [isDragging, setIsDragging] = useState2(false);
	if (isCanvas) {
		if (currentItem !== startFrom) {
			setCurrentItem(startFrom);
		}
	}
	const visibilityRef = useRef(null);
	const isInView = useInView(visibilityRef);
	const isVisible = usePageVisibility() && isInView;
	const factor = isInverted ? 1 : -1;
	const xOrY = useMotionValue(childrenSize);
	const canvasPosition = isHorizontal
		? -startFrom * (size?.itemWidth + gap)
		: -startFrom * (size?.itemHeight + gap);
	const newPosition = () => factor * currentItem * itemWithGap;
	const wrappedValue = !isCanvas
		? useTransform(xOrY, (value) => {
				const wrapped = wrap(-childrenSize, -childrenSize * 2, value);
				return isNaN(wrapped) ? 0 : wrapped;
			})
		: 0;
	const wrappedIndex = wrap(0, totalItems, currentItem);
	const wrappedIndexInverted = wrap(0, -totalItems, currentItem);
	useLayoutEffect(() => {
		if (size?.children === null) return;
		if (!initialResize.current && isResizing) {
			xOrY.set(newPosition());
		}
	}, [
		size,
		childrenSize,
		factor,
		itemOffset,
		currentItem,
		itemWithGap,
		isResizing,
	]);
	const switchPages = () => {
		if (isCanvas || !hasChildren || !size.parent || isDragging) return;
		if (xOrY.get() !== newPosition()) {
			animate(xOrY, newPosition(), transitionControl);
		}
		if (autoPlayControl && shouldPlayOnHover && (playOffscreen || isVisible)) {
			timeoutRef.current = setTimeout(() => {
				startTransition(() => setCurrentItem((item) => item + 1));
				switchPages();
			}, intervalControl * 1e3);
		}
	};
	const setDelta = (delta, transition = false) => {
		if (!isInverted) {
			if (transition)
				startTransition(() => setCurrentItem((item) => item + delta));
			else setCurrentItem((item) => item + delta);
		} else {
			if (transition)
				startTransition(() => setCurrentItem((item) => item - delta));
			else setCurrentItem((item) => item - delta);
		}
	};
	const setPage = (index) => {
		const currentItemWrapped = wrap(0, totalItems, currentItem);
		const currentItemWrappedInvert = wrap(0, -totalItems, currentItem);
		const goto = index - currentItemWrapped;
		const gotoInverted = index - Math.abs(currentItemWrappedInvert);
		if (!isInverted) {
			startTransition(() => setCurrentItem((item) => item + goto));
		} else {
			startTransition(() => setCurrentItem((item) => item - gotoInverted));
		}
	};
	const handleDragStart = () => {
		startTransition(() => setIsDragging(true));
	};
	const handleDragEnd = (event, { offset, velocity }) => {
		startTransition(() => setIsDragging(false));
		const offsetXorY = isHorizontal ? offset.x : offset.y;
		const velocityThreshold = 200;
		const velocityXorY = isHorizontal ? velocity.x : velocity.y;
		const isHalfOfNext = offsetXorY < -size.item / 2;
		const isHalfOfPrev = offsetXorY > size.item / 2;
		const normalizedOffset = Math.abs(offsetXorY);
		const itemDelta = Math.round(normalizedOffset / size.item);
		const itemDeltaFromOne = itemDelta === 0 ? 1 : itemDelta;
		if (velocityXorY > velocityThreshold) {
			setDelta(-itemDeltaFromOne, true);
		} else if (velocityXorY < -velocityThreshold) {
			setDelta(itemDeltaFromOne, true);
		} else {
			if (isHalfOfNext) {
				setDelta(itemDelta, true);
			}
			if (isHalfOfPrev) {
				setDelta(-itemDelta, true);
			}
		}
	};
	useEffect2(() => {
		if (!isVisible || isResizing || amountChildren <= 1) return;
		switchPages();
		return () => timeoutRef.current && clearTimeout(timeoutRef.current);
	}, [dupedChildren, isVisible, isResizing]);
	let childCounter = 0;
	const columnOrRowValue = `calc(${100 / itemAmount}% - ${gap}px + ${gap / itemAmount}px)`;
	for (let index = 0; index < duplicateBy; index++) {
		dupedChildren = dupedChildren.concat(
			Children.map(filteredSlots, (child, childIndex) => {
				let ref;
				if (index === 0) {
					if (childIndex === 0) {
						ref = childrenRef[0];
					} else if (childIndex === filteredSlots.length - 1) {
						ref = childrenRef[1];
					}
				}
				return (
					<Slide
						ref={ref}
						slideKey={index + childIndex + "lg"}
						index={index}
						width={
							isHorizontal
								? itemAmount > 1
									? columnOrRowValue
									: "100%"
								: "100%"
						}
						height={
							!isHorizontal
								? itemAmount > 1
									? columnOrRowValue
									: "100%"
								: "100%"
						}
						size={size}
						child={child}
						numChildren={filteredSlots?.length}
						wrappedValue={wrappedValue}
						childCounter={childCounter++}
						gap={gap}
						isCanvas={isCanvas}
						isHorizontal={isHorizontal}
						effectsOpacity={effectsOpacity}
						effectsScale={effectsScale}
						effectsRotate={effectsRotate}
					>
						{index + childIndex}
					</Slide>
				);
			}),
		);
	}
	const fadeDirection = isHorizontal ? "to right" : "to bottom";
	const fadeWidthStart = fadeWidth / 2;
	const fadeWidthEnd = 100 - fadeWidth / 2;
	const fadeInsetStart = clamp(fadeInset, 0, fadeWidthStart);
	const fadeInsetEnd = 100 - fadeInset;
	const fadeMask = `linear-gradient(${fadeDirection}, rgba(0, 0, 0, ${fadeAlpha}) ${fadeInsetStart}%, rgba(0, 0, 0, 1) ${fadeWidthStart}%, rgba(0, 0, 0, 1) ${fadeWidthEnd}%, rgba(0, 0, 0, ${fadeAlpha}) ${fadeInsetEnd}%)`;
	const dots = [];
	const dotsBlurStyle = {};
	if (showProgressDots) {
		for (let i = 0; i < filteredSlots?.length; i++) {
			dots.push(
				<Dot
					dotStyle={{
						...dotStyle,
						width: dotSize,
						height: dotSize,
						backgroundColor: dotsFill,
					}}
					buttonStyle={baseButtonStyles}
					selectedOpacity={dotsActiveOpacity}
					opacity={dotsOpacity}
					onClick={() => setPage(i)}
					wrappedIndex={wrappedIndex}
					wrappedIndexInverted={wrappedIndexInverted}
					total={totalItems}
					index={i}
					gap={dotsGap}
					padding={dotsPadding}
					isHorizontal={isHorizontal}
					isInverted={isInverted}
				/>,
			);
		}
		if (dotsBlur > 0) {
			dotsBlurStyle.backdropFilter =
				dotsBlurStyle.WebkitBackdropFilter = `blur(${dotsBlur}px)`;
		}
	}
	const dragProps = dragControl
		? {
				drag: isHorizontal ? "x" : "y",
				onDragStart: handleDragStart,
				onDragEnd: handleDragEnd,
				dragDirectionLock: true,
				values: {
					x: xOrY,
					y: xOrY,
				},
				dragMomentum: false,
			}
		: {};
	const arrowHasTop =
		arrowPosition === "top-left" ||
		arrowPosition === "top-mid" ||
		arrowPosition === "top-right";
	const arrowHasBottom =
		arrowPosition === "bottom-left" ||
		arrowPosition === "bottom-mid" ||
		arrowPosition === "bottom-right";
	const arrowHasLeft =
		arrowPosition === "top-left" || arrowPosition === "bottom-left";
	const arrowHasRight =
		arrowPosition === "top-right" || arrowPosition === "bottom-right";
	const arrowHasMid =
		arrowPosition === "top-mid" ||
		arrowPosition === "bottom-mid" ||
		arrowPosition === "auto";
	return (
		<section
			style={{
				...containerStyle,
				padding: paddingValue,
				WebkitMaskImage: fadeContent ? fadeMask : void 0,
				maskImage: fadeContent ? fadeMask : void 0,
				opacity: size?.item !== null ? 1 : OPACITY_0,
				userSelect: "none",
			}}
			onMouseEnter={() => {
				setIsHovering(true);
				if (!effectsHover) setShouldPlayOnHover(false);
			}}
			onMouseLeave={() => {
				setIsHovering(false);
				if (!effectsHover) setShouldPlayOnHover(true);
			}}
			onMouseDown={(event) => {
				event.preventDefault();
				startTransition(() => setIsMouseDown(true));
			}}
			onMouseUp={() => startTransition(() => setIsMouseDown(false))}
			ref={visibilityRef}
		>
			<div
				style={{
					width: "100%",
					height: "100%",
					margin: 0,
					padding: "inherit",
					position: "absolute",
					inset: 0,
					overflow: overflow ? "visible" : "hidden",
					borderRadius,
					userSelect: "none",
					perspective: isCanvas ? "none" : effectsPerspective,
				}}
			>
				<motion.ul
					ref={parentRef}
					{...dragProps}
					style={{
						...containerStyle,
						gap,
						placeItems: alignment,
						x: isHorizontal ? (isCanvas ? canvasPosition : wrappedValue) : 0,
						y: !isHorizontal ? (isCanvas ? canvasPosition : wrappedValue) : 0,
						flexDirection: isHorizontal ? "row" : "column",
						transformStyle:
							effectsRotate !== 0 && !isCanvas ? "preserve-3d" : void 0,
						cursor: dragControl ? (isMouseDown ? "grabbing" : "grab") : "auto",
						userSelect: "none",
						...style,
					}}
				>
					{dupedChildren}
				</motion.ul>
			</div>
			<fieldset
				style={{
					...controlsStyles,
				}}
				aria-label={"Slideshow pagination controls"}
				className={"framer--slideshow-controls"}
			>
				<motion.div
					style={{
						position: "absolute",
						display: "flex",
						flexDirection: isHorizontal ? "row" : "column",
						justifyContent: arrowShouldSpace ? "space-between" : "center",
						gap: arrowShouldSpace ? "unset" : arrowGap,
						opacity: arrowShouldFadeIn ? OPACITY_0 : 1,
						alignItems: "center",
						inset: arrowPadding,
						top: arrowShouldSpace
							? arrowPadding
							: arrowHasTop
								? arrowPaddingTop
								: "unset",
						left: arrowShouldSpace
							? arrowPadding
							: arrowHasLeft
								? arrowPaddingLeft
								: arrowHasMid
									? 0
									: "unset",
						right: arrowShouldSpace
							? arrowPadding
							: arrowHasRight
								? arrowPaddingRight
								: arrowHasMid
									? 0
									: "unset",
						bottom: arrowShouldSpace
							? arrowPadding
							: arrowHasBottom
								? arrowPaddingBottom
								: "unset",
					}}
					animate={
						arrowShouldFadeIn && {
							opacity: isHovering ? 1 : OPACITY_0,
						}
					}
					transition={transitionControl}
				>
					<motion.button
						type={"button"}
						style={{
							...baseButtonStyles,
							backgroundColor: arrowFill,
							width: arrowSize,
							height: arrowSize,
							borderRadius: arrowRadius,
							rotate: !isHorizontal ? 90 : 0,
							display: showMouseControls ? "block" : "none",
							pointerEvents: "auto",
						}}
						onClick={() => setDelta(-1, true)}
						aria-label={"Previous"}
						whileTap={{
							scale: 0.9,
						}}
						transition={{
							duration: 0.15,
						}}
					>
						<img
							decoding={"async"}
							width={arrowSize}
							height={arrowSize}
							src={
								leftArrow ||
								"https://framerusercontent.com/images/6tTbkXggWgQCAJ4DO2QEdXXmgM.svg"
							}
							alt={"Back Arrow"}
						/>
					</motion.button>
					<motion.button
						type={"button"}
						style={{
							...baseButtonStyles,
							backgroundColor: arrowFill,
							width: arrowSize,
							height: arrowSize,
							borderRadius: arrowRadius,
							rotate: !isHorizontal ? 90 : 0,
							display: showMouseControls ? "block" : "none",
							pointerEvents: "auto",
						}}
						onClick={() => setDelta(1, true)}
						aria-label={"Next"}
						whileTap={{
							scale: 0.9,
						}}
						transition={{
							duration: 0.15,
						}}
					>
						<img
							decoding={"async"}
							width={arrowSize}
							height={arrowSize}
							src={
								rightArrow ||
								"https://framerusercontent.com/images/11KSGbIZoRSg4pjdnUoif6MKHI.svg"
							}
							alt={"Next Arrow"}
						/>
					</motion.button>
				</motion.div>
				{dots.length > 1 ? (
					<div
						style={{
							...dotsContainerStyle,
							left: isHorizontal ? "50%" : dotsInset,
							top: !isHorizontal ? "50%" : "unset",
							transform: isHorizontal ? "translateX(-50%)" : "translateY(-50%)",
							flexDirection: isHorizontal ? "row" : "column",
							bottom: isHorizontal ? dotsInset : "unset",
							borderRadius: dotsRadius,
							backgroundColor: dotsBackground,
							userSelect: "none",
							...dotsBlurStyle,
						}}
					>
						{dots}
					</div>
				) : null}
			</fieldset>
		</section>
	);
}
Slideshow.defaultProps = {
	direction: "left",
	dragControl: false,
	startFrom: 0,
	itemAmount: 1,
	infinity: true,
	gap: 10,
	padding: 10,
	autoPlayControl: true,
	effectsOptions: {
		effectsOpacity: 1,
		effectsScale: 1,
		effectsRotate: 0,
		effectsPerspective: 1200,
		effectsHover: true,
		playOffscreen: false,
	},
	transitionControl: {
		type: "spring",
		stiffness: 200,
		damping: 40,
	},
	fadeOptions: {
		fadeContent: false,
		overflow: false,
		fadeWidth: 25,
		fadeAlpha: 0,
		fadeInset: 0,
	},
	arrowOptions: {
		showMouseControls: true,
		arrowShouldFadeIn: false,
		arrowShouldSpace: true,
		arrowFill: "rgba(0,0,0,0.2)",
		arrowSize: 40,
	},
	progressOptions: {
		showProgressDots: true,
	},
};
addPropertyControls(Slideshow, {
	slots: {
		type: ControlType.Array,
		title: "Content",
		control: {
			type: ControlType.ComponentInstance,
		},
	},
	direction: {
		type: ControlType.Enum,
		title: "Direction",
		options: ["left", "right", "top", "bottom"],
		optionIcons: [
			"direction-left",
			"direction-right",
			"direction-up",
			"direction-down",
		],
		optionTitles: ["Left", "Right", "Top", "Bottom"],
		displaySegmentedControl: true,
		defaultValue: Slideshow.defaultProps.direction,
	},
	autoPlayControl: {
		type: ControlType.Boolean,
		title: "Auto Play",
		defaultValue: true,
	},
	intervalControl: {
		type: ControlType.Number,
		title: "Interval",
		defaultValue: 1.5,
		min: 0.5,
		max: 10,
		step: 0.1,
		displayStepper: true,
		unit: "s",
		hidden: (props) => !props.autoPlayControl,
	},
	dragControl: {
		type: ControlType.Boolean,
		title: "Draggable",
		defaultValue: false,
	},
	startFrom: {
		type: ControlType.Number,
		title: "Current",
		min: 0,
		max: 10,
		displayStepper: true,
		defaultValue: Slideshow.defaultProps.startFrom,
	},
	effectsOptions: {
		type: ControlType.Object,
		title: "Effects",
		controls: {
			effectsOpacity: {
				type: ControlType.Number,
				title: "Opacity",
				defaultValue: Slideshow.defaultProps.effectsOptions.effectsOpacity,
				min: 0,
				max: 1,
				step: 0.01,
				displayStepper: true,
			},
			effectsScale: {
				type: ControlType.Number,
				title: "Scale",
				defaultValue: Slideshow.defaultProps.effectsOptions.effectsScale,
				min: 0,
				max: 1,
				step: 0.01,
				displayStepper: true,
			},
			effectsPerspective: {
				type: ControlType.Number,
				title: "Perspective",
				defaultValue: Slideshow.defaultProps.effectsOptions.effectsPerspective,
				min: 200,
				max: 2e3,
				step: 1,
			},
			effectsRotate: {
				type: ControlType.Number,
				title: "Rotate",
				defaultValue: Slideshow.defaultProps.effectsOptions.effectsRotate,
				min: -180,
				max: 180,
				step: 1,
			},
			effectsHover: {
				type: ControlType.Boolean,
				title: "On Hover",
				enabledTitle: "Play",
				disabledTitle: "Pause",
				defaultValue: Slideshow.defaultProps.effectsOptions.effectsHover,
			},
			playOffscreen: {
				type: ControlType.Boolean,
				title: "Offscreen",
				enabledTitle: "Play",
				disabledTitle: "Pause",
				defaultValue: Slideshow.defaultProps.effectsOptions.playOffscreen,
			},
		},
	},
	alignment: {
		type: ControlType.Enum,
		title: "Align",
		options: ["flex-start", "center", "flex-end"],
		optionIcons: {
			direction: {
				right: ["align-top", "align-middle", "align-bottom"],
				left: ["align-top", "align-middle", "align-bottom"],
				top: ["align-left", "align-center", "align-right"],
				bottom: ["align-left", "align-center", "align-right"],
			},
		},
		defaultValue: "center",
		displaySegmentedControl: true,
	},
	itemAmount: {
		type: ControlType.Number,
		title: "Items",
		min: 1,
		max: 10,
		displayStepper: true,
		defaultValue: Slideshow.defaultProps.itemAmount,
	},
	gap: {
		type: ControlType.Number,
		title: "Gap",
		min: 0,
	},
	padding: {
		title: "Padding",
		type: ControlType.FusedNumber,
		toggleKey: "paddingPerSide",
		toggleTitles: ["Padding", "Padding per side"],
		defaultValue: 0,
		valueKeys: ["paddingTop", "paddingRight", "paddingBottom", "paddingLeft"],
		valueLabels: ["T", "R", "B", "L"],
		min: 0,
	},
	borderRadius: {
		type: ControlType.Number,
		title: "Radius",
		min: 0,
		max: 500,
		displayStepper: true,
		defaultValue: 0,
	},
	transitionControl: {
		type: ControlType.Transition,
		defaultValue: Slideshow.defaultProps.transitionControl,
		title: "Transition",
	},
	fadeOptions: {
		type: ControlType.Object,
		title: "Clipping",
		controls: {
			fadeContent: {
				type: ControlType.Boolean,
				title: "Fade",
				defaultValue: false,
			},
			overflow: {
				type: ControlType.Boolean,
				title: "Overflow",
				enabledTitle: "Show",
				disabledTitle: "Hide",
				defaultValue: false,
				hidden(props) {
					return props.fadeContent === true;
				},
			},
			fadeWidth: {
				type: ControlType.Number,
				title: "Width",
				defaultValue: 25,
				min: 0,
				max: 100,
				unit: "%",
				hidden(props) {
					return props.fadeContent === false;
				},
			},
			fadeInset: {
				type: ControlType.Number,
				title: "Inset",
				defaultValue: 0,
				min: 0,
				max: 100,
				unit: "%",
				hidden(props) {
					return props.fadeContent === false;
				},
			},
			fadeAlpha: {
				type: ControlType.Number,
				title: "Opacity",
				defaultValue: 0,
				min: 0,
				max: 1,
				step: 0.05,
				hidden(props) {
					return props.fadeContent === false;
				},
			},
		},
	},
	arrowOptions: {
		type: ControlType.Object,
		title: "Arrows",
		controls: {
			showMouseControls: {
				type: ControlType.Boolean,
				title: "Show",
				defaultValue: Slideshow.defaultProps.arrowOptions.showMouseControls,
			},
			arrowFill: {
				type: ControlType.Color,
				title: "Fill",
				hidden: (props) => !props.showMouseControls,
				defaultValue: Slideshow.defaultProps.arrowOptions.arrowFill,
			},
			leftArrow: {
				type: ControlType.Image,
				title: "Previous",
				hidden: (props) => !props.showMouseControls,
			},
			rightArrow: {
				type: ControlType.Image,
				title: "Next",
				hidden: (props) => !props.showMouseControls,
			},
			arrowSize: {
				type: ControlType.Number,
				title: "Size",
				min: 0,
				max: 200,
				displayStepper: true,
				defaultValue: Slideshow.defaultProps.arrowOptions.arrowSize,
				hidden: (props) => !props.showMouseControls,
			},
			arrowRadius: {
				type: ControlType.Number,
				title: "Radius",
				min: 0,
				max: 500,
				defaultValue: 40,
				hidden: (props) => !props.showMouseControls,
			},
			arrowShouldFadeIn: {
				type: ControlType.Boolean,
				title: "Fade In",
				defaultValue: false,
				hidden: (props) => !props.showMouseControls,
			},
			arrowShouldSpace: {
				type: ControlType.Boolean,
				title: "Distance",
				enabledTitle: "Space",
				disabledTitle: "Group",
				defaultValue: Slideshow.defaultProps.arrowOptions.arrowShouldSpace,
				hidden: (props) => !props.showMouseControls,
			},
			arrowPosition: {
				type: ControlType.Enum,
				title: "Position",
				options: [
					"auto",
					"top-left",
					"top-mid",
					"top-right",
					"bottom-left",
					"bottom-mid",
					"bottom-right",
				],
				optionTitles: [
					"Center",
					"Top Left",
					"Top Middle",
					"Top Right",
					"Bottom Left",
					"Bottom Middle",
					"Bottom Right",
				],
				hidden: (props) => !props.showMouseControls || props.arrowShouldSpace,
			},
			arrowPadding: {
				type: ControlType.Number,
				title: "Inset",
				min: -100,
				max: 100,
				defaultValue: 20,
				displayStepper: true,
				hidden: (props) => !props.showMouseControls || !props.arrowShouldSpace,
			},
			arrowPaddingTop: {
				type: ControlType.Number,
				title: "Top",
				min: -500,
				max: 500,
				defaultValue: 0,
				displayStepper: true,
				hidden: (props) =>
					!props.showMouseControls ||
					props.arrowShouldSpace ||
					props.arrowPosition === "auto" ||
					props.arrowPosition === "bottom-mid" ||
					props.arrowPosition === "bottom-left" ||
					props.arrowPosition === "bottom-right",
			},
			arrowPaddingBottom: {
				type: ControlType.Number,
				title: "Bottom",
				min: -500,
				max: 500,
				defaultValue: 0,
				displayStepper: true,
				hidden: (props) =>
					!props.showMouseControls ||
					props.arrowShouldSpace ||
					props.arrowPosition === "auto" ||
					props.arrowPosition === "top-mid" ||
					props.arrowPosition === "top-left" ||
					props.arrowPosition === "top-right",
			},
			arrowPaddingRight: {
				type: ControlType.Number,
				title: "Right",
				min: -500,
				max: 500,
				defaultValue: 0,
				displayStepper: true,
				hidden: (props) =>
					!props.showMouseControls ||
					props.arrowShouldSpace ||
					props.arrowPosition === "auto" ||
					props.arrowPosition === "top-left" ||
					props.arrowPosition === "top-mid" ||
					props.arrowPosition === "bottom-left" ||
					props.arrowPosition === "bottom-mid",
			},
			arrowPaddingLeft: {
				type: ControlType.Number,
				title: "Left",
				min: -500,
				max: 500,
				defaultValue: 0,
				displayStepper: true,
				hidden: (props) =>
					!props.showMouseControls ||
					props.arrowShouldSpace ||
					props.arrowPosition === "auto" ||
					props.arrowPosition === "top-right" ||
					props.arrowPosition === "top-mid" ||
					props.arrowPosition === "bottom-right" ||
					props.arrowPosition === "bottom-mid",
			},
			arrowGap: {
				type: ControlType.Number,
				title: "Gap",
				min: 0,
				max: 100,
				defaultValue: 10,
				displayStepper: true,
				hidden: (props) => !props.showMouseControls || props.arrowShouldSpace,
			},
		},
	},
	progressOptions: {
		type: ControlType.Object,
		title: "Dots",
		controls: {
			showProgressDots: {
				type: ControlType.Boolean,
				title: "Show",
				defaultValue: false,
			},
			dotSize: {
				type: ControlType.Number,
				title: "Size",
				min: 1,
				max: 100,
				defaultValue: 10,
				displayStepper: true,
				hidden: (props) => !props.showProgressDots || props.showScrollbar,
			},
			dotsInset: {
				type: ControlType.Number,
				title: "Inset",
				min: -100,
				max: 100,
				defaultValue: 10,
				displayStepper: true,
				hidden: (props) => !props.showProgressDots || props.showScrollbar,
			},
			dotsGap: {
				type: ControlType.Number,
				title: "Gap",
				min: 0,
				max: 100,
				defaultValue: 10,
				displayStepper: true,
				hidden: (props) => !props.showProgressDots || props.showScrollbar,
			},
			dotsPadding: {
				type: ControlType.Number,
				title: "Padding",
				min: 0,
				max: 100,
				defaultValue: 10,
				displayStepper: true,
				hidden: (props) => !props.showProgressDots || props.showScrollbar,
			},
			dotsFill: {
				type: ControlType.Color,
				title: "Fill",
				defaultValue: "#fff",
				hidden: (props) => !props.showProgressDots || props.showScrollbar,
			},
			dotsBackground: {
				type: ControlType.Color,
				title: "Backdrop",
				defaultValue: "rgba(0,0,0,0.2)",
				hidden: (props) => !props.showProgressDots || props.showScrollbar,
			},
			dotsRadius: {
				type: ControlType.Number,
				title: "Radius",
				min: 0,
				max: 200,
				defaultValue: 50,
				hidden: (props) => !props.showProgressDots || props.showScrollbar,
			},
			dotsOpacity: {
				type: ControlType.Number,
				title: "Opacity",
				min: 0,
				max: 1,
				defaultValue: 0.5,
				step: 0.1,
				displayStepper: true,
				hidden: (props) => !props.showProgressDots || props.showScrollbar,
			},
			dotsActiveOpacity: {
				type: ControlType.Number,
				title: "Current",
				min: 0,
				max: 1,
				defaultValue: 1,
				step: 0.1,
				displayStepper: true,
				hidden: (props) => !props.showProgressDots || props.showScrollbar,
			},
			dotsBlur: {
				type: ControlType.Number,
				title: "Blur",
				min: 0,
				max: 50,
				defaultValue: 0,
				step: 1,
				hidden: (props) => !props.showProgressDots || props.showScrollbar,
			},
		},
	},
});
var containerStyle = {
	display: "flex",
	flexDirection: "row",
	width: "100%",
	height: "100%",
	maxWidth: "100%",
	maxHeight: "100%",
	placeItems: "center",
	margin: 0,
	padding: 0,
	listStyleType: "none",
	textIndent: "none",
};
var placeholderStyles = {
	display: "flex",
	width: "100%",
	height: "100%",
	placeContent: "center",
	placeItems: "center",
	flexDirection: "column",
	color: "#96F",
	background: "rgba(136, 85, 255, 0.1)",
	fontSize: 11,
	overflow: "hidden",
	padding: "20px 20px 30px 20px",
};
var emojiStyles = {
	fontSize: 32,
	marginBottom: 10,
};
var titleStyles = {
	margin: 0,
	marginBottom: 10,
	fontWeight: 600,
	textAlign: "center",
};
var subtitleStyles = {
	margin: 0,
	opacity: 0.7,
	maxWidth: 180,
	lineHeight: 1.5,
	textAlign: "center",
};
var baseButtonStyles = {
	border: "none",
	display: "flex",
	placeContent: "center",
	placeItems: "center",
	overflow: "hidden",
	background: "transparent",
	cursor: "pointer",
	margin: 0,
	padding: 0,
};
var controlsStyles = {
	display: "flex",
	justifyContent: "space-between",
	alignItems: "center",
	position: "absolute",
	pointerEvents: "none",
	userSelect: "none",
	top: 0,
	left: 0,
	right: 0,
	bottom: 0,
	border: 0,
	padding: 0,
	margin: 0,
};
var clamp = (num, min, max) => Math.min(Math.max(num, min), max);
var Slide = /* @__PURE__ */ memo(
	/* @__PURE__ */ forwardRef(function Component(props, ref) {
		const {
			slideKey,
			width,
			height,
			child,
			size,
			gap,
			wrappedValue,
			numChildren,
			childCounter,
			isCanvas,
			effects,
			effectsOpacity,
			effectsScale,
			effectsRotate,
			isHorizontal,
			isLast,
			index,
		} = props;
		const fallbackRef = useRef();
		const childOffset = (size?.item + gap) * childCounter;
		const scrollRange = [
			-size?.item,
			0,
			size?.parent - size?.item + gap,
			size?.parent,
		].map((val) => val - childOffset);
		const rotateY =
			!isCanvas &&
			useTransform(wrappedValue, scrollRange, [
				-effectsRotate,
				0,
				0,
				effectsRotate,
			]);
		const rotateX =
			!isCanvas &&
			useTransform(wrappedValue, scrollRange, [
				effectsRotate,
				0,
				0,
				-effectsRotate,
			]);
		const opacity =
			!isCanvas &&
			useTransform(wrappedValue, scrollRange, [
				effectsOpacity,
				1,
				1,
				effectsOpacity,
			]);
		const scale =
			!isCanvas &&
			useTransform(wrappedValue, scrollRange, [
				effectsScale,
				1,
				1,
				effectsScale,
			]);
		const originXorY =
			!isCanvas && useTransform(wrappedValue, scrollRange, [1, 1, 0, 0]);
		const isVisible =
			!isCanvas &&
			useTransform(
				wrappedValue,
				(latest) => latest >= scrollRange[1] && latest <= scrollRange[2],
			);
		useEffect2(() => {
			if (!isVisible) return;
			return isVisible.on("change", (newValue) => {
				const node = ref?.current ?? fallbackRef.current;
				node?.setAttribute("aria-hidden", !newValue);
			});
		}, []);
		const visibility = isCanvas
			? "visible"
			: useTransform(
					wrappedValue,
					[
						scrollRange[0] - size.viewportLength,
						mix(scrollRange[1], scrollRange[2], 0.5),
						scrollRange[3] + size.viewportLength,
					],
					["hidden", "visible", "hidden"],
				);
		const key = slideKey + "child";
		return (
			<LayoutGroup inherit={"id"} id={key}>
				<li
					style={{
						display: "contents",
					}}
					aria-hidden={index === 0 ? false : true}
				>
					{
						/* @__PURE__ */ cloneElement(child, {
							ref: ref ?? fallbackRef,
							key,
							style: {
								...child.props?.style,
								flexShrink: 0,
								userSelect: "none",
								width,
								height,
								opacity,
								scale,
								originX: isHorizontal ? originXorY : 0.5,
								originY: !isHorizontal ? originXorY : 0.5,
								rotateY: isHorizontal ? rotateY : 0,
								rotateX: !isHorizontal ? rotateX : 0,
								visibility,
							},
							layoutId: child.props.layoutId
								? child.props.layoutId + "-original-" + index
								: void 0,
						})
					}
				</li>
			</LayoutGroup>
		);
	}),
);
var Dot = /* @__PURE__ */ memo(function Dot2({
	selectedOpacity,
	opacity,
	total,
	index,
	wrappedIndex,
	wrappedIndexInverted,
	dotStyle: dotStyle2,
	buttonStyle,
	gap,
	padding,
	isHorizontal,
	isInverted,
	...props
}) {
	let isSelected = wrappedIndex === index;
	if (isInverted) {
		isSelected = Math.abs(wrappedIndexInverted) === index;
	}
	const inlinePadding = gap / 2;
	const top = !isHorizontal && index > 0 ? inlinePadding : padding;
	const bottom = !isHorizontal && index !== total - 1 ? inlinePadding : padding;
	const right = isHorizontal && index !== total - 1 ? inlinePadding : padding;
	const left = isHorizontal && index > 0 ? inlinePadding : padding;
	return (
		<button
			aria-label={`Scroll to page ${index + 1}`}
			type={"button"}
			{...props}
			style={{
				...buttonStyle,
				padding: `${top}px ${right}px ${bottom}px ${left}px`,
			}}
		>
			<motion.div
				style={{
					...dotStyle2,
				}}
				initial={false}
				animate={{
					opacity: isSelected ? selectedOpacity : opacity,
				}}
				transition={{
					duration: 0.3,
				}}
			/>
		</button>
	);
});
var dotsContainerStyle = {
	display: "flex",
	placeContent: "center",
	placeItems: "center",
	overflow: "hidden",
	position: "absolute",
	pointerEvents: "auto",
};
var dotStyle = {
	borderRadius: "50%",
	background: "white",
	cursor: "pointer",
	border: "none",
	placeContent: "center",
	placeItems: "center",
	padding: 0,
};

// /:https://framerusercontent.com/modules/mKH3htkECLLQoKJlWd37/Ge1LL99zgd2sSXbX5NN9/EO4twovNM.js
import { jsx as _jsx2, jsxs as _jsxs2 } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls as addPropertyControls2,
	ControlType as ControlType2,
	cx,
	CycleVariantState,
	useActiveVariantCallback,
	useComponentViewport,
	useLocaleInfo,
	useOnVariantChange,
	useVariantState,
	withCSS,
} from "unframer";
import {
	LayoutGroup as LayoutGroup2,
	motion as motion2,
	MotionConfigContext,
} from "unframer";
import * as React from "react";
import { useRef as useRef2 } from "react";
var cycleOrder = ["icDt0cdGI", "segxOzkqb", "ISo_RVNeT", "eU1OLuGyy"];
var serializationHash = "framer-KqTuN";
var variantClassNames = {
	eU1OLuGyy: "framer-v-93yswl",
	icDt0cdGI: "framer-v-y8y34s",
	ISo_RVNeT: "framer-v-f6jv72",
	segxOzkqb: "framer-v-5dwvr1",
};
function addPropertyOverrides(overrides, ...variants) {
	const nextOverrides = {};
	variants?.forEach(
		(variant) => variant && Object.assign(nextOverrides, overrides[variant]),
	);
	return nextOverrides;
}
var transition1 = {
	bounce: 0.2,
	delay: 0,
	duration: 1.2,
	type: "spring",
};
var transition2 = {
	duration: 0,
	type: "tween",
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition = value ?? config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion2.create(React.Fragment);
var humanReadableVariantMap = {
	"Progress 1st": "icDt0cdGI",
	"Progress 2nd": "segxOzkqb",
	"Progress 3rd": "ISo_RVNeT",
	"Progress 4th": "eU1OLuGyy",
};
var getProps = ({ height, id, width, ...props }) => {
	return {
		...props,
		variant:
			humanReadableVariantMap[props.variant] ?? props.variant ?? "icDt0cdGI",
	};
};
var createLayoutDependency = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component2 = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const fallbackRef = useRef2(null);
	const refBinding = ref ?? fallbackRef;
	const defaultLayoutId = React.useId();
	const { activeLocale, setLocale } = useLocaleInfo();
	const componentViewport = useComponentViewport();
	const {
		style,
		className: className3,
		layoutId,
		variant,
		...restProps
	} = getProps(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		cycleOrder,
		defaultVariant: "icDt0cdGI",
		ref: refBinding,
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const { activeVariantCallback, delay } =
		useActiveVariantCallback(baseVariant);
	const onAppearssqbxc = activeVariantCallback(async (...args) => {
		await delay(() => setVariant(CycleVariantState), 1600);
	});
	const onAppearizaw = activeVariantCallback(async (...args) => {
		await delay(() => setVariant(CycleVariantState), 200);
	});
	useOnVariantChange(baseVariant, {
		default: onAppearssqbxc,
		eU1OLuGyy: onAppearizaw,
	});
	const sharedStyleClassNames = [];
	const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
	return (
		<LayoutGroup2 id={layoutId ?? defaultLayoutId}>
			<Variants animate={variants} initial={false}>
				<Transition
					value={transition1}
					{...addPropertyOverrides(
						{
							eU1OLuGyy: {
								value: transition2,
							},
						},
						baseVariant,
						gestureVariant,
					)}
				>
					<motion2.div
						{...restProps}
						{...gestureHandlers}
						className={cx(
							scopingClassNames,
							"framer-y8y34s",
							className3,
							classNames,
						)}
						data-framer-name={"Progress 1st"}
						data-highlight={true}
						layoutDependency={layoutDependency}
						layoutId={"icDt0cdGI"}
						ref={refBinding}
						style={{
							...style,
						}}
						{...addPropertyOverrides(
							{
								eU1OLuGyy: {
									"data-framer-name": "Progress 4th",
								},
								ISo_RVNeT: {
									"data-framer-name": "Progress 3rd",
								},
								segxOzkqb: {
									"data-framer-name": "Progress 2nd",
								},
							},
							baseVariant,
							gestureVariant,
						)}
					>
						<motion2.div
							className={"framer-43eflo"}
							data-framer-name={"Draft"}
							layoutDependency={layoutDependency}
							layoutId={"sov5DjXHp"}
							style={{
								backgroundColor:
									"var(--token-5987ca59-a0c2-4562-861a-b7e9d2d04a6e, rgb(129, 74, 200))",
								borderBottomLeftRadius: 91,
								borderBottomRightRadius: 91,
								borderTopLeftRadius: 91,
								borderTopRightRadius: 91,
							}}
						/>
						<motion2.div
							className={"framer-oph57s"}
							data-framer-name={"Schedule"}
							layoutDependency={layoutDependency}
							layoutId={"B0SGJHBX9"}
							style={{
								backgroundColor: "rgb(38, 38, 38)",
								borderBottomLeftRadius: 91,
								borderBottomRightRadius: 91,
								borderTopLeftRadius: 91,
								borderTopRightRadius: 91,
							}}
							variants={{
								ISo_RVNeT: {
									backgroundColor:
										"var(--token-5987ca59-a0c2-4562-861a-b7e9d2d04a6e, rgb(129, 74, 200))",
								},
								segxOzkqb: {
									backgroundColor:
										"var(--token-5987ca59-a0c2-4562-861a-b7e9d2d04a6e, rgb(129, 74, 200))",
								},
							}}
						/>
						<motion2.div
							className={"framer-eimz2f"}
							data-framer-name={"Sent"}
							layoutDependency={layoutDependency}
							layoutId={"LP2A5iZp0"}
							style={{
								backgroundColor: "rgb(38, 38, 38)",
								borderBottomLeftRadius: 91,
								borderBottomRightRadius: 91,
								borderTopLeftRadius: 91,
								borderTopRightRadius: 91,
							}}
							variants={{
								ISo_RVNeT: {
									backgroundColor:
										"var(--token-5987ca59-a0c2-4562-861a-b7e9d2d04a6e, rgb(129, 74, 200))",
								},
							}}
						/>
						<motion2.div
							className={"framer-18r5bwp"}
							data-framer-name={"Progress bar"}
							layoutDependency={layoutDependency}
							layoutId={"E8AdM7jLe"}
							style={{
								backgroundColor: "rgba(255, 255, 255, 0.05)",
							}}
						>
							<motion2.div
								className={"framer-1h1ju6o"}
								data-framer-name={"Progress"}
								layoutDependency={layoutDependency}
								layoutId={"ztJv19UHf"}
								style={{
									backgroundColor:
										"var(--token-5987ca59-a0c2-4562-861a-b7e9d2d04a6e, rgb(129, 74, 200))",
								}}
							/>
						</motion2.div>
					</motion2.div>
				</Transition>
			</Variants>
		</LayoutGroup2>
	);
});
var css3 = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-KqTuN.framer-1e273fz, .framer-KqTuN .framer-1e273fz { display: block; }",
	".framer-KqTuN.framer-y8y34s { align-content: center; align-items: center; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: 25px; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: 260px; }",
	".framer-KqTuN .framer-43eflo { flex: none; height: 9px; left: 0px; overflow: visible; position: absolute; top: calc(52.00000000000002% - 9px / 2); width: 9px; z-index: 2; }",
	".framer-KqTuN .framer-oph57s { flex: none; height: 9px; left: calc(50.00000000000002% - 9px / 2); overflow: visible; position: absolute; top: calc(52.00000000000002% - 9px / 2); width: 9px; z-index: 2; }",
	".framer-KqTuN .framer-eimz2f { flex: none; height: 9px; overflow: visible; position: absolute; right: 0px; top: calc(52.00000000000002% - 9px / 2); width: 9px; z-index: 2; }",
	".framer-KqTuN .framer-18r5bwp { align-content: center; align-items: center; display: flex; flex: 1 0 0px; flex-direction: column; flex-wrap: nowrap; gap: 10px; height: 2px; justify-content: center; overflow: visible; padding: 0px; position: relative; width: 1px; }",
	".framer-KqTuN .framer-1h1ju6o { flex: none; height: 1px; left: 0px; overflow: visible; position: absolute; top: 0px; width: 1%; z-index: 1; }",
	"@supports (background: -webkit-named-image(i)) and (not (font-palette:dark)) { .framer-KqTuN.framer-y8y34s, .framer-KqTuN .framer-18r5bwp { gap: 0px; } .framer-KqTuN.framer-y8y34s > * { margin: 0px; margin-left: calc(10px / 2); margin-right: calc(10px / 2); } .framer-KqTuN.framer-y8y34s > :first-child { margin-left: 0px; } .framer-KqTuN.framer-y8y34s > :last-child { margin-right: 0px; } .framer-KqTuN .framer-18r5bwp > * { margin: 0px; margin-bottom: calc(10px / 2); margin-top: calc(10px / 2); } .framer-KqTuN .framer-18r5bwp > :first-child { margin-top: 0px; } .framer-KqTuN .framer-18r5bwp > :last-child { margin-bottom: 0px; } }",
	".framer-KqTuN.framer-v-5dwvr1 .framer-1h1ju6o { width: 50%; }",
	".framer-KqTuN.framer-v-f6jv72 .framer-1h1ju6o { width: 100%; }",
	".framer-KqTuN.framer-v-93yswl .framer-1h1ju6o { width: 1%; }",
];
var FramerEO4twovNM = withCSS(Component2, css3, "framer-KqTuN");
var stdin_default = FramerEO4twovNM;
FramerEO4twovNM.displayName = "progress";
FramerEO4twovNM.defaultProps = {
	height: 25,
	width: 260,
};
addPropertyControls2(FramerEO4twovNM, {
	variant: {
		options: ["icDt0cdGI", "segxOzkqb", "ISo_RVNeT", "eU1OLuGyy"],
		optionTitles: [
			"Progress 1st",
			"Progress 2nd",
			"Progress 3rd",
			"Progress 4th",
		],
		title: "Variant",
		type: ControlType2.Enum,
	},
});
addFonts(
	FramerEO4twovNM,
	[
		{
			explicitInter: true,
			fonts: [],
		},
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// /:https://framer.com/m/sales-and-markteing-dHXg.js
var PhosphorFonts = getFonts(Icon);
var MotionDivWithFX = withFX(motion3.div);
var SlideshowFonts = getFonts(Slideshow);
var ProgressFonts = getFonts(stdin_default);
var serializationHash2 = "framer-RtwLd";
var variantClassNames2 = {
	hQzFhEBuZ: "framer-v-1hijlhj",
};
var transition12 = {
	bounce: 0.2,
	delay: 0,
	duration: 0.4,
	type: "spring",
};
var transition22 = {
	delay: 0,
	duration: 3,
	ease: [0, 0, 1, 1],
	type: "tween",
};
var animation = {
	opacity: 1,
	rotate: 360,
	rotateX: 0,
	rotateY: 0,
	scale: 1,
	skewX: 0,
	skewY: 0,
	x: 0,
	y: 0,
};
var Transition2 = ({ value, children }) => {
	const config = React2.useContext(MotionConfigContext2);
	const transition = value ?? config.transition;
	const contextValue = React2.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext2.Provider value={contextValue}>
			{children}
		</MotionConfigContext2.Provider>
	);
};
var Variants2 = motion3.create(React2.Fragment);
var getProps2 = ({ height, id, width, ...props }) => {
	return {
		...props,
	};
};
var createLayoutDependency2 = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component3 = /* @__PURE__ */ React2.forwardRef(function (props, ref) {
	const fallbackRef = useRef3(null);
	const refBinding = ref ?? fallbackRef;
	const defaultLayoutId = React2.useId();
	const { activeLocale, setLocale } = useLocaleInfo2();
	const componentViewport = useComponentViewport2();
	const {
		style,
		className: className3,
		layoutId,
		variant,
		...restProps
	} = getProps2(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState2({
		defaultVariant: "hQzFhEBuZ",
		ref: refBinding,
		variant,
		variantClassNames: variantClassNames2,
	});
	const layoutDependency = createLayoutDependency2(props, variants);
	const sharedStyleClassNames = [className2, className];
	const scopingClassNames = cx2(serializationHash2, ...sharedStyleClassNames);
	return (
		<LayoutGroup3 id={layoutId ?? defaultLayoutId}>
			<Variants2 animate={variants} initial={false}>
				<Transition2 value={transition12}>
					<motion3.div
						{...restProps}
						{...gestureHandlers}
						className={cx2(
							scopingClassNames,
							"framer-1hijlhj",
							className3,
							classNames,
						)}
						data-border={true}
						data-framer-name={"Sales and marketing"}
						layoutDependency={layoutDependency}
						layoutId={"hQzFhEBuZ"}
						ref={refBinding}
						style={{
							"--border-bottom-width": "1px",
							"--border-color":
								"var(--token-313dd4d6-9859-4bdd-889b-954a849d13e3, rgb(34, 34, 34))",
							"--border-left-width": "1px",
							"--border-right-width": "1px",
							"--border-style": "solid",
							"--border-top-width": "1px",
							backgroundColor:
								"var(--token-aae92d1e-1be4-447e-8038-565c6944f982, rgb(0, 0, 0))",
							borderTopLeftRadius: 12,
							borderTopRightRadius: 12,
							...style,
						}}
					>
						<motion3.div
							className={"framer-16ws62c"}
							data-framer-name={"Top container"}
							layoutDependency={layoutDependency}
							layoutId={"RttoBhqeZ"}
						>
							<motion3.div
								className={"framer-1iaubn2"}
								data-border={true}
								data-framer-name={"Title box"}
								layoutDependency={layoutDependency}
								layoutId={"r8G5H0Uh2"}
								style={{
									"--border-bottom-width": "1px",
									"--border-color": "rgb(34, 34, 34)",
									"--border-left-width": "1px",
									"--border-right-width": "1px",
									"--border-style": "solid",
									"--border-top-width": "1px",
									backgroundColor:
										"var(--token-cfb0af42-62a5-486a-837b-9870b5e7030b, rgba(255, 255, 255, 0.05))",
									borderBottomLeftRadius: 2,
									borderBottomRightRadius: 2,
									borderTopLeftRadius: 2,
									borderTopRightRadius: 2,
								}}
							>
								<motion3.div
									className={"framer-hwnrl5"}
									data-framer-name={"E-mail sending"}
									layoutDependency={layoutDependency}
									layoutId={"a7Ng13Z9j"}
									style={{
										borderBottomLeftRadius: 2,
										borderBottomRightRadius: 2,
										borderTopLeftRadius: 2,
										borderTopRightRadius: 2,
									}}
								>
									<RichText
										__fromCanvasComponent={true}
										className={"framer-1q6e4a1"}
										fonts={["Inter"]}
										layoutDependency={layoutDependency}
										layoutId={"r8tV0eiAz"}
										style={{
											"--framer-link-text-color": "rgb(0, 153, 255)",
											"--framer-link-text-decoration": "underline",
										}}
										verticalAlignment={"top"}
										withExternalLayout={true}
									>
										<React2.Fragment>
											<motion3.p
												className={"framer-styles-preset-1kdv3c8"}
												data-styles-preset={"PDoVxFHq4"}
											>
												{"E-mail Sending.."}
											</motion3.p>
										</React2.Fragment>
									</RichText>
								</motion3.div>
								<MotionDivWithFX
									__framer__loop={animation}
									__framer__loopEffectEnabled={true}
									__framer__loopRepeatDelay={0}
									__framer__loopRepeatType={"loop"}
									__framer__loopTransition={transition22}
									__perspectiveFX={false}
									__smartComponentFX={true}
									__targetOpacity={1}
									className={"framer-11yusqg"}
									data-framer-name={"Icon holder"}
									layoutDependency={layoutDependency}
									layoutId={"fafp3N2tD"}
									style={{
										borderBottomLeftRadius: 4,
										borderBottomRightRadius: 4,
										borderTopLeftRadius: 4,
										borderTopRightRadius: 4,
									}}
								>
									<ComponentViewportProvider>
										<SmartComponentScopedContainer
											className={"framer-bte77q-container"}
											isAuthoredByUser={true}
											isModuleExternal={true}
											layoutDependency={layoutDependency}
											layoutId={"Ki3CKUCrA-container"}
											nodeId={"Ki3CKUCrA"}
											rendersWithMotion={true}
											scopeId={"XyIROVeU0"}
										>
											<Icon
												color={
													"var(--token-a888adc2-3d05-4d6f-88b7-8dab97418795, rgb(129, 74, 200))"
												}
												height={"100%"}
												iconSearch={"circle-notch"}
												iconSelection={"House"}
												id={"Ki3CKUCrA"}
												layoutId={"Ki3CKUCrA"}
												mirrored={false}
												selectByList={false}
												style={{
													height: "100%",
													width: "100%",
												}}
												weight={"bold"}
												width={"100%"}
											/>
										</SmartComponentScopedContainer>
									</ComponentViewportProvider>
								</MotionDivWithFX>
							</motion3.div>
							<motion3.div
								className={"framer-g2wf5d"}
								data-framer-name={"Filter"}
								layoutDependency={layoutDependency}
								layoutId={"QM1DxLjtU"}
							>
								<motion3.div
									className={"framer-9z78ez"}
									data-border={true}
									data-framer-name={"Linkedin"}
									layoutDependency={layoutDependency}
									layoutId={"OUGfg8y4H"}
									style={{
										"--border-bottom-width": "1px",
										"--border-color":
											"var(--token-313dd4d6-9859-4bdd-889b-954a849d13e3, rgb(34, 34, 34))",
										"--border-left-width": "1px",
										"--border-right-width": "1px",
										"--border-style": "solid",
										"--border-top-width": "1px",
										backgroundColor:
											"var(--token-cfb0af42-62a5-486a-837b-9870b5e7030b, rgba(255, 255, 255, 0.05))",
										borderBottomLeftRadius: 8,
										borderBottomRightRadius: 8,
										borderTopLeftRadius: 8,
										borderTopRightRadius: 8,
									}}
								>
									<RichText
										__fromCanvasComponent={true}
										className={"framer-36hojt"}
										fonts={["Inter"]}
										layoutDependency={layoutDependency}
										layoutId={"WoUxVSneH"}
										style={{
											"--framer-link-text-color": "rgb(0, 153, 255)",
											"--framer-link-text-decoration": "underline",
										}}
										verticalAlignment={"top"}
										withExternalLayout={true}
									>
										<React2.Fragment>
											<motion3.p
												className={"framer-styles-preset-11j7728"}
												data-styles-preset={"nWaHBmz7N"}
											>
												{"LinkedIn"}
											</motion3.p>
										</React2.Fragment>
									</RichText>
								</motion3.div>
								<motion3.div
									className={"framer-7s5aal"}
									data-border={true}
									data-framer-name={"IT services"}
									layoutDependency={layoutDependency}
									layoutId={"kcpfjhtzD"}
									style={{
										"--border-bottom-width": "1px",
										"--border-color":
											"var(--token-313dd4d6-9859-4bdd-889b-954a849d13e3, rgb(34, 34, 34))",
										"--border-left-width": "1px",
										"--border-right-width": "1px",
										"--border-style": "solid",
										"--border-top-width": "1px",
										backgroundColor:
											"var(--token-cfb0af42-62a5-486a-837b-9870b5e7030b, rgba(255, 255, 255, 0.05))",
										borderBottomLeftRadius: 8,
										borderBottomRightRadius: 8,
										borderTopLeftRadius: 8,
										borderTopRightRadius: 8,
									}}
								>
									<RichText
										__fromCanvasComponent={true}
										className={"framer-1mm553r"}
										fonts={["Inter"]}
										layoutDependency={layoutDependency}
										layoutId={"D3Sp40F15"}
										style={{
											"--framer-link-text-color": "rgb(0, 153, 255)",
											"--framer-link-text-decoration": "underline",
										}}
										verticalAlignment={"top"}
										withExternalLayout={true}
									>
										<React2.Fragment>
											<motion3.p
												className={"framer-styles-preset-11j7728"}
												data-styles-preset={"nWaHBmz7N"}
											>
												{"IT services"}
											</motion3.p>
										</React2.Fragment>
									</RichText>
								</motion3.div>
								<motion3.div
									className={"framer-1w5t8tj"}
									data-border={true}
									layoutDependency={layoutDependency}
									layoutId={"Oe7HYHs0G"}
									style={{
										"--border-bottom-width": "1px",
										"--border-color":
											"var(--token-313dd4d6-9859-4bdd-889b-954a849d13e3, rgb(34, 34, 34))",
										"--border-left-width": "1px",
										"--border-right-width": "1px",
										"--border-style": "solid",
										"--border-top-width": "1px",
										backgroundColor:
											"var(--token-cfb0af42-62a5-486a-837b-9870b5e7030b, rgba(255, 255, 255, 0.05))",
										borderBottomLeftRadius: 8,
										borderBottomRightRadius: 8,
										borderTopLeftRadius: 8,
										borderTopRightRadius: 8,
									}}
								>
									<RichText
										__fromCanvasComponent={true}
										className={"framer-1q7axti"}
										fonts={["Inter"]}
										layoutDependency={layoutDependency}
										layoutId={"fYO5EgAN7"}
										style={{
											"--framer-link-text-color": "rgb(0, 153, 255)",
											"--framer-link-text-decoration": "underline",
										}}
										verticalAlignment={"top"}
										withExternalLayout={true}
									>
										<React2.Fragment>
											<motion3.p
												className={"framer-styles-preset-11j7728"}
												data-styles-preset={"nWaHBmz7N"}
											>
												{"Founders"}
											</motion3.p>
										</React2.Fragment>
									</RichText>
								</motion3.div>
							</motion3.div>
						</motion3.div>
						<motion3.div
							className={"framer-ix8t27"}
							data-framer-name={"slideshow"}
							layoutDependency={layoutDependency}
							layoutId={"E0gvAGecd"}
							style={{
								mask: "linear-gradient(180deg, rgba(0,0,0,0) 0%, rgba(0,0,0,1) 29.429420264991556%, rgba(0, 0, 0, 1) 79.72972972972973%, rgba(0, 0, 0, 0) 100%) add",
								WebkitMask:
									"linear-gradient(180deg, rgba(0,0,0,0) 0%, rgba(0,0,0,1) 29.429420264991556%, rgba(0, 0, 0, 1) 79.72972972972973%, rgba(0, 0, 0, 0) 100%) add",
							}}
						>
							<ComponentViewportProvider>
								<SmartComponentScopedContainer
									className={"framer-mrto5s-container"}
									isAuthoredByUser={true}
									isModuleExternal={true}
									layoutDependency={layoutDependency}
									layoutId={"FE1jEXbEq-container"}
									nodeId={"FE1jEXbEq"}
									rendersWithMotion={true}
									scopeId={"XyIROVeU0"}
								>
									<Slideshow
										alignment={"center"}
										arrowOptions={{
											arrowFill: "rgba(0, 0, 0, 0.2)",
											arrowGap: 10,
											arrowPadding: 20,
											arrowPaddingBottom: 0,
											arrowPaddingLeft: 0,
											arrowPaddingRight: 0,
											arrowPaddingTop: 0,
											arrowPosition: "auto",
											arrowRadius: 40,
											arrowShouldFadeIn: false,
											arrowShouldSpace: true,
											arrowSize: 40,
											showMouseControls: false,
										}}
										autoPlayControl={true}
										borderRadius={0}
										direction={"top"}
										dragControl={false}
										effectsOptions={{
											effectsHover: true,
											effectsOpacity: 0.5,
											effectsPerspective: 1200,
											effectsRotate: 0,
											effectsScale: 1,
											playOffscreen: false,
										}}
										fadeOptions={{
											fadeAlpha: 0,
											fadeContent: false,
											fadeInset: 0,
											fadeWidth: 25,
											overflow: true,
										}}
										gap={5}
										height={"100%"}
										id={"FE1jEXbEq"}
										intervalControl={5}
										itemAmount={1}
										layoutId={"FE1jEXbEq"}
										padding={0}
										paddingBottom={0}
										paddingLeft={0}
										paddingPerSide={false}
										paddingRight={0}
										paddingTop={0}
										progressOptions={{
											dotsActiveOpacity: 1,
											dotsBackground: "rgba(0, 0, 0, 0.2)",
											dotsBlur: 0,
											dotsFill: "rgb(255, 255, 255)",
											dotsGap: 10,
											dotsInset: 10,
											dotSize: 10,
											dotsOpacity: 0.5,
											dotsPadding: 10,
											dotsRadius: 50,
											showProgressDots: false,
										}}
										slots={[
											<motion3.div
												className={"framer-102fscf"}
												data-border={true}
												data-framer-name={"Lead 1st"}
												layoutDependency={layoutDependency}
												layoutId={"vtM7OIlPR"}
												style={{
													"--border-bottom-width": "1px",
													"--border-color":
														"var(--token-313dd4d6-9859-4bdd-889b-954a849d13e3, rgb(34, 34, 34))",
													"--border-left-width": "1px",
													"--border-right-width": "1px",
													"--border-style": "solid",
													"--border-top-width": "1px",
													backgroundColor:
														"var(--token-cfb0af42-62a5-486a-837b-9870b5e7030b, rgba(255, 255, 255, 0.05))",
													borderBottomLeftRadius: 4,
													borderBottomRightRadius: 4,
													borderTopLeftRadius: 4,
													borderTopRightRadius: 4,
												}}
											>
												<motion3.div
													className={"framer-bd1rla"}
													data-framer-name={"Top container"}
													layoutDependency={layoutDependency}
													layoutId={"GfOgT4Je7"}
													style={{
														borderBottomLeftRadius: 4,
														borderBottomRightRadius: 4,
														borderTopLeftRadius: 4,
														borderTopRightRadius: 4,
													}}
												>
													<motion3.div
														className={"framer-148av47"}
														data-framer-name={"Profile holder"}
														layoutDependency={layoutDependency}
														layoutId={"q17FTZQMN"}
														style={{
															backgroundColor: "rgba(255, 255, 255, 0.12)",
															borderBottomLeftRadius: 36,
															borderBottomRightRadius: 36,
															borderTopLeftRadius: 36,
															borderTopRightRadius: 36,
														}}
													>
														<SVG
															className={"framer-19pi5ck"}
															data-framer-name={"Graphic"}
															layout={"position"}
															layoutDependency={layoutDependency}
															layoutId={"eecBIf2Ek"}
															opacity={0.9}
															style={{
																opacity: 0.9,
															}}
															svg={
																'<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><path d="M 16.5 7.063 C 16.5 10.258 14.57 13 12 13 C 9.428 13 7.5 10.258 7.5 7.062 C 7.5 3.868 9.16 2 12 2 C 14.84 2 16.5 3.867 16.5 7.063 Z M 4.102 20.142 C 4.487 20.6 6.145 22 12 22 C 17.855 22 19.512 20.6 19.898 20.143 C 19.97 20.054 20.003 19.94 19.988 19.826 C 19.9 18.944 19.106 15 12 15 C 4.894 15 4.1 18.944 4.011 19.826 C 3.996 19.94 4.029 20.054 4.102 20.143 Z" fill="rgb(255, 255, 255)"></path></svg>'
															}
															svgContentId={12334961471}
															withExternalLayout={true}
														/>
													</motion3.div>
													<motion3.div
														className={"framer-ake1lg"}
														data-framer-name={"name & position"}
														layoutDependency={layoutDependency}
														layoutId={"wXQc1J1WX"}
													>
														<RichText
															__fromCanvasComponent={true}
															className={"framer-1b8jg25"}
															fonts={["Inter"]}
															layoutDependency={layoutDependency}
															layoutId={"xVrAOjoGv"}
															style={{
																"--framer-link-text-color": "rgb(0, 153, 255)",
																"--framer-link-text-decoration": "underline",
															}}
															verticalAlignment={"top"}
															withExternalLayout={true}
														>
															<React2.Fragment>
																<motion3.p
																	className={"framer-styles-preset-1kdv3c8"}
																	data-styles-preset={"PDoVxFHq4"}
																>
																	{"Jack Daniel"}
																</motion3.p>
															</React2.Fragment>
														</RichText>
														<RichText
															__fromCanvasComponent={true}
															className={"framer-1bcx6sm"}
															fonts={["Inter"]}
															layoutDependency={layoutDependency}
															layoutId={"uIiWJA0b0"}
															style={{
																"--framer-link-text-color": "rgb(0, 153, 255)",
																"--framer-link-text-decoration": "underline",
															}}
															verticalAlignment={"top"}
															withExternalLayout={true}
														>
															<React2.Fragment>
																<motion3.p
																	className={"framer-styles-preset-11j7728"}
																	data-styles-preset={"nWaHBmz7N"}
																>
																	{"Founder"}
																</motion3.p>
															</React2.Fragment>
														</RichText>
													</motion3.div>
													<motion3.div
														className={"framer-jk7xf5"}
														data-border={true}
														data-framer-name={"verified"}
														layoutDependency={layoutDependency}
														layoutId={"Y8nJvE2pF"}
														style={{
															"--border-bottom-width": "1px",
															"--border-color":
																"var(--token-313dd4d6-9859-4bdd-889b-954a849d13e3, rgb(34, 34, 34))",
															"--border-left-width": "1px",
															"--border-right-width": "1px",
															"--border-style": "solid",
															"--border-top-width": "1px",
															backgroundColor:
																"var(--token-cfb0af42-62a5-486a-837b-9870b5e7030b, rgba(255, 255, 255, 0.05))",
															borderBottomLeftRadius: 8,
															borderBottomRightRadius: 8,
															borderTopLeftRadius: 8,
															borderTopRightRadius: 8,
														}}
													>
														<RichText
															__fromCanvasComponent={true}
															className={"framer-ecjxqh"}
															fonts={["Inter"]}
															layoutDependency={layoutDependency}
															layoutId={"y5HcZvbF9"}
															style={{
																"--framer-link-text-color": "rgb(0, 153, 255)",
																"--framer-link-text-decoration": "underline",
															}}
															verticalAlignment={"top"}
															withExternalLayout={true}
														>
															<React2.Fragment>
																<motion3.p
																	className={"framer-styles-preset-11j7728"}
																	data-styles-preset={"nWaHBmz7N"}
																>
																	{"Verified"}
																</motion3.p>
															</React2.Fragment>
														</RichText>
													</motion3.div>
												</motion3.div>
												<motion3.div
													className={"framer-ymtord"}
													data-framer-name={"Full detail grid"}
													layoutDependency={layoutDependency}
													layoutId={"zIDaK3XUV"}
												>
													<RichText
														__fromCanvasComponent={true}
														className={"framer-1x88cpf"}
														fonts={["Inter"]}
														layoutDependency={layoutDependency}
														layoutId={"HVQdC3a1S"}
														style={{
															"--framer-link-text-color": "rgb(0, 153, 255)",
															"--framer-link-text-decoration": "underline",
														}}
														verticalAlignment={"top"}
														withExternalLayout={true}
													>
														<React2.Fragment>
															<motion3.p
																className={"framer-styles-preset-11j7728"}
																data-styles-preset={"nWaHBmz7N"}
															>
																{"E-mail"}
															</motion3.p>
															<motion3.p
																className={"framer-styles-preset-11j7728"}
																data-styles-preset={"nWaHBmz7N"}
															>
																{"justin@main.com"}
															</motion3.p>
														</React2.Fragment>
													</RichText>
													<RichText
														__fromCanvasComponent={true}
														className={"framer-1cq1zhm"}
														fonts={["Inter"]}
														layoutDependency={layoutDependency}
														layoutId={"VMuJQF2ID"}
														style={{
															"--framer-link-text-color": "rgb(0, 153, 255)",
															"--framer-link-text-decoration": "underline",
														}}
														verticalAlignment={"top"}
														withExternalLayout={true}
													>
														<React2.Fragment>
															<motion3.p
																className={"framer-styles-preset-11j7728"}
																data-styles-preset={"nWaHBmz7N"}
															>
																{"Company"}
															</motion3.p>
															<motion3.p
																className={"framer-styles-preset-11j7728"}
																data-styles-preset={"nWaHBmz7N"}
															>
																{"Xavier LLC"}
															</motion3.p>
														</React2.Fragment>
													</RichText>
												</motion3.div>
											</motion3.div>,
											<motion3.div
												className={"framer-h1vp5b"}
												data-border={true}
												data-framer-name={"Lead 2nd"}
												layoutDependency={layoutDependency}
												layoutId={"HuTuPiLDV"}
												style={{
													"--border-bottom-width": "1px",
													"--border-color":
														"var(--token-313dd4d6-9859-4bdd-889b-954a849d13e3, rgb(34, 34, 34))",
													"--border-left-width": "1px",
													"--border-right-width": "1px",
													"--border-style": "solid",
													"--border-top-width": "1px",
													backgroundColor:
														"var(--token-cfb0af42-62a5-486a-837b-9870b5e7030b, rgba(255, 255, 255, 0.05))",
													borderBottomLeftRadius: 4,
													borderBottomRightRadius: 4,
													borderTopLeftRadius: 4,
													borderTopRightRadius: 4,
												}}
											>
												<motion3.div
													className={"framer-loic76"}
													data-framer-name={"Top container"}
													layoutDependency={layoutDependency}
													layoutId={"pRBvrEbHA"}
													style={{
														borderBottomLeftRadius: 4,
														borderBottomRightRadius: 4,
														borderTopLeftRadius: 4,
														borderTopRightRadius: 4,
													}}
												>
													<motion3.div
														className={"framer-7buygd"}
														data-framer-name={"Profile holder"}
														layoutDependency={layoutDependency}
														layoutId={"xTSwaBDNG"}
														style={{
															backgroundColor: "rgba(255, 255, 255, 0.12)",
															borderBottomLeftRadius: 36,
															borderBottomRightRadius: 36,
															borderTopLeftRadius: 36,
															borderTopRightRadius: 36,
														}}
													>
														<SVG
															className={"framer-1i1xp44"}
															data-framer-name={"Graphic"}
															layout={"position"}
															layoutDependency={layoutDependency}
															layoutId={"ASc1wLZ84"}
															opacity={0.9}
															style={{
																opacity: 0.9,
															}}
															svg={
																'<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><path d="M 16.5 7.063 C 16.5 10.258 14.57 13 12 13 C 9.428 13 7.5 10.258 7.5 7.062 C 7.5 3.868 9.16 2 12 2 C 14.84 2 16.5 3.867 16.5 7.063 Z M 4.102 20.142 C 4.487 20.6 6.145 22 12 22 C 17.855 22 19.512 20.6 19.898 20.143 C 19.97 20.054 20.003 19.94 19.988 19.826 C 19.9 18.944 19.106 15 12 15 C 4.894 15 4.1 18.944 4.011 19.826 C 3.996 19.94 4.029 20.054 4.102 20.143 Z" fill="rgb(255, 255, 255)"></path></svg>'
															}
															svgContentId={12334961471}
															withExternalLayout={true}
														/>
													</motion3.div>
													<motion3.div
														className={"framer-v0i74l"}
														data-framer-name={"name & position"}
														layoutDependency={layoutDependency}
														layoutId={"SJyY6LrBQ"}
													>
														<RichText
															__fromCanvasComponent={true}
															className={"framer-j5fsxw"}
															fonts={["Inter"]}
															layoutDependency={layoutDependency}
															layoutId={"bQTToLGAQ"}
															style={{
																"--framer-link-text-color": "rgb(0, 153, 255)",
																"--framer-link-text-decoration": "underline",
															}}
															verticalAlignment={"top"}
															withExternalLayout={true}
														>
															<React2.Fragment>
																<motion3.p
																	className={"framer-styles-preset-1kdv3c8"}
																	data-styles-preset={"PDoVxFHq4"}
																>
																	{"Gorge Chapel"}
																</motion3.p>
															</React2.Fragment>
														</RichText>
														<RichText
															__fromCanvasComponent={true}
															className={"framer-13ffgtk"}
															fonts={["Inter"]}
															layoutDependency={layoutDependency}
															layoutId={"XiMELvFA8"}
															style={{
																"--framer-link-text-color": "rgb(0, 153, 255)",
																"--framer-link-text-decoration": "underline",
															}}
															verticalAlignment={"top"}
															withExternalLayout={true}
														>
															<React2.Fragment>
																<motion3.p
																	className={"framer-styles-preset-11j7728"}
																	data-styles-preset={"nWaHBmz7N"}
																>
																	{"Founder"}
																</motion3.p>
															</React2.Fragment>
														</RichText>
													</motion3.div>
													<motion3.div
														className={"framer-9nqt77"}
														data-border={true}
														data-framer-name={"verified"}
														layoutDependency={layoutDependency}
														layoutId={"NcEnmKFfW"}
														style={{
															"--border-bottom-width": "1px",
															"--border-color":
																"var(--token-313dd4d6-9859-4bdd-889b-954a849d13e3, rgb(34, 34, 34))",
															"--border-left-width": "1px",
															"--border-right-width": "1px",
															"--border-style": "solid",
															"--border-top-width": "1px",
															backgroundColor:
																"var(--token-cfb0af42-62a5-486a-837b-9870b5e7030b, rgba(255, 255, 255, 0.05))",
															borderBottomLeftRadius: 8,
															borderBottomRightRadius: 8,
															borderTopLeftRadius: 8,
															borderTopRightRadius: 8,
														}}
													>
														<RichText
															__fromCanvasComponent={true}
															className={"framer-1jeeqw6"}
															fonts={["Inter"]}
															layoutDependency={layoutDependency}
															layoutId={"beUorFOhz"}
															style={{
																"--framer-link-text-color": "rgb(0, 153, 255)",
																"--framer-link-text-decoration": "underline",
															}}
															verticalAlignment={"top"}
															withExternalLayout={true}
														>
															<React2.Fragment>
																<motion3.p
																	className={"framer-styles-preset-11j7728"}
																	data-styles-preset={"nWaHBmz7N"}
																>
																	{"Verified"}
																</motion3.p>
															</React2.Fragment>
														</RichText>
													</motion3.div>
												</motion3.div>
												<motion3.div
													className={"framer-fpg75d"}
													data-framer-name={"Full detail grid"}
													layoutDependency={layoutDependency}
													layoutId={"gP9AiMppM"}
												>
													<RichText
														__fromCanvasComponent={true}
														className={"framer-tjdb2"}
														fonts={["Inter"]}
														layoutDependency={layoutDependency}
														layoutId={"oZl2t4279"}
														style={{
															"--framer-link-text-color": "rgb(0, 153, 255)",
															"--framer-link-text-decoration": "underline",
														}}
														verticalAlignment={"top"}
														withExternalLayout={true}
													>
														<React2.Fragment>
															<motion3.p
																className={"framer-styles-preset-11j7728"}
																data-styles-preset={"nWaHBmz7N"}
															>
																{"E-mail"}
															</motion3.p>
															<motion3.p
																className={"framer-styles-preset-11j7728"}
																data-styles-preset={"nWaHBmz7N"}
															>
																{"gorge@mail.com"}
															</motion3.p>
														</React2.Fragment>
													</RichText>
													<RichText
														__fromCanvasComponent={true}
														className={"framer-ks0yro"}
														fonts={["Inter"]}
														layoutDependency={layoutDependency}
														layoutId={"udDvOWf3Y"}
														style={{
															"--framer-link-text-color": "rgb(0, 153, 255)",
															"--framer-link-text-decoration": "underline",
														}}
														verticalAlignment={"top"}
														withExternalLayout={true}
													>
														<React2.Fragment>
															<motion3.p
																className={"framer-styles-preset-11j7728"}
																data-styles-preset={"nWaHBmz7N"}
															>
																{"Company"}
															</motion3.p>
															<motion3.p
																className={"framer-styles-preset-11j7728"}
																data-styles-preset={"nWaHBmz7N"}
															>
																{"Chapel LLC"}
															</motion3.p>
														</React2.Fragment>
													</RichText>
												</motion3.div>
											</motion3.div>,
											<motion3.div
												className={"framer-vxlryj"}
												data-border={true}
												data-framer-name={"Lead 3rd"}
												layoutDependency={layoutDependency}
												layoutId={"DQk5te7LW"}
												style={{
													"--border-bottom-width": "1px",
													"--border-color":
														"var(--token-313dd4d6-9859-4bdd-889b-954a849d13e3, rgb(34, 34, 34))",
													"--border-left-width": "1px",
													"--border-right-width": "1px",
													"--border-style": "solid",
													"--border-top-width": "1px",
													backgroundColor:
														"var(--token-cfb0af42-62a5-486a-837b-9870b5e7030b, rgba(255, 255, 255, 0.05))",
													borderBottomLeftRadius: 4,
													borderBottomRightRadius: 4,
													borderTopLeftRadius: 4,
													borderTopRightRadius: 4,
												}}
											>
												<motion3.div
													className={"framer-poo8dj"}
													data-framer-name={"Top container"}
													layoutDependency={layoutDependency}
													layoutId={"IzedCfV_R"}
													style={{
														borderBottomLeftRadius: 4,
														borderBottomRightRadius: 4,
														borderTopLeftRadius: 4,
														borderTopRightRadius: 4,
													}}
												>
													<motion3.div
														className={"framer-6t6228"}
														data-framer-name={"Profile holder"}
														layoutDependency={layoutDependency}
														layoutId={"wr7sifjce"}
														style={{
															backgroundColor: "rgba(255, 255, 255, 0.12)",
															borderBottomLeftRadius: 36,
															borderBottomRightRadius: 36,
															borderTopLeftRadius: 36,
															borderTopRightRadius: 36,
														}}
													>
														<SVG
															className={"framer-11c8c42"}
															data-framer-name={"Graphic"}
															layout={"position"}
															layoutDependency={layoutDependency}
															layoutId={"FZGnG8z66"}
															opacity={0.9}
															style={{
																opacity: 0.9,
															}}
															svg={
																'<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><path d="M 16.5 7.063 C 16.5 10.258 14.57 13 12 13 C 9.428 13 7.5 10.258 7.5 7.062 C 7.5 3.868 9.16 2 12 2 C 14.84 2 16.5 3.867 16.5 7.063 Z M 4.102 20.142 C 4.487 20.6 6.145 22 12 22 C 17.855 22 19.512 20.6 19.898 20.143 C 19.97 20.054 20.003 19.94 19.988 19.826 C 19.9 18.944 19.106 15 12 15 C 4.894 15 4.1 18.944 4.011 19.826 C 3.996 19.94 4.029 20.054 4.102 20.143 Z" fill="rgb(255, 255, 255)"></path></svg>'
															}
															svgContentId={12334961471}
															withExternalLayout={true}
														/>
													</motion3.div>
													<motion3.div
														className={"framer-emjpsn"}
														data-framer-name={"name & position"}
														layoutDependency={layoutDependency}
														layoutId={"IvRSNqvCS"}
													>
														<RichText
															__fromCanvasComponent={true}
															className={"framer-1x1sgv0"}
															fonts={["Inter"]}
															layoutDependency={layoutDependency}
															layoutId={"f88zswjii"}
															style={{
																"--framer-link-text-color": "rgb(0, 153, 255)",
																"--framer-link-text-decoration": "underline",
															}}
															verticalAlignment={"top"}
															withExternalLayout={true}
														>
															<React2.Fragment>
																<motion3.p
																	className={"framer-styles-preset-1kdv3c8"}
																	data-styles-preset={"PDoVxFHq4"}
																>
																	{"Mike Tylor"}
																</motion3.p>
															</React2.Fragment>
														</RichText>
														<RichText
															__fromCanvasComponent={true}
															className={"framer-16570bf"}
															fonts={["Inter"]}
															layoutDependency={layoutDependency}
															layoutId={"rGcSe56ap"}
															style={{
																"--framer-link-text-color": "rgb(0, 153, 255)",
																"--framer-link-text-decoration": "underline",
															}}
															verticalAlignment={"top"}
															withExternalLayout={true}
														>
															<React2.Fragment>
																<motion3.p
																	className={"framer-styles-preset-11j7728"}
																	data-styles-preset={"nWaHBmz7N"}
																>
																	{"Founder"}
																</motion3.p>
															</React2.Fragment>
														</RichText>
													</motion3.div>
													<motion3.div
														className={"framer-7bloxn"}
														data-border={true}
														data-framer-name={"verified"}
														layoutDependency={layoutDependency}
														layoutId={"gNvTxqaGz"}
														style={{
															"--border-bottom-width": "1px",
															"--border-color":
																"var(--token-313dd4d6-9859-4bdd-889b-954a849d13e3, rgb(34, 34, 34))",
															"--border-left-width": "1px",
															"--border-right-width": "1px",
															"--border-style": "solid",
															"--border-top-width": "1px",
															backgroundColor:
																"var(--token-cfb0af42-62a5-486a-837b-9870b5e7030b, rgba(255, 255, 255, 0.05))",
															borderBottomLeftRadius: 8,
															borderBottomRightRadius: 8,
															borderTopLeftRadius: 8,
															borderTopRightRadius: 8,
														}}
													>
														<RichText
															__fromCanvasComponent={true}
															className={"framer-1l4w8tu"}
															fonts={["Inter"]}
															layoutDependency={layoutDependency}
															layoutId={"rtzvkrYwW"}
															style={{
																"--framer-link-text-color": "rgb(0, 153, 255)",
																"--framer-link-text-decoration": "underline",
															}}
															verticalAlignment={"top"}
															withExternalLayout={true}
														>
															<React2.Fragment>
																<motion3.p
																	className={"framer-styles-preset-11j7728"}
																	data-styles-preset={"nWaHBmz7N"}
																>
																	{"Verified"}
																</motion3.p>
															</React2.Fragment>
														</RichText>
													</motion3.div>
												</motion3.div>
												<motion3.div
													className={"framer-11u4xr3"}
													data-framer-name={"Full detail grid"}
													layoutDependency={layoutDependency}
													layoutId={"WX5u4RXCb"}
												>
													<RichText
														__fromCanvasComponent={true}
														className={"framer-1yel9pj"}
														fonts={["Inter"]}
														layoutDependency={layoutDependency}
														layoutId={"SpdekFw02"}
														style={{
															"--framer-link-text-color": "rgb(0, 153, 255)",
															"--framer-link-text-decoration": "underline",
														}}
														verticalAlignment={"top"}
														withExternalLayout={true}
													>
														<React2.Fragment>
															<motion3.p
																className={"framer-styles-preset-11j7728"}
																data-styles-preset={"nWaHBmz7N"}
															>
																{"E-mail"}
															</motion3.p>
															<motion3.p
																className={"framer-styles-preset-11j7728"}
																data-styles-preset={"nWaHBmz7N"}
															>
																{"mike@Cmb.com"}
															</motion3.p>
														</React2.Fragment>
													</RichText>
													<RichText
														__fromCanvasComponent={true}
														className={"framer-1fgrzi5"}
														fonts={["Inter"]}
														layoutDependency={layoutDependency}
														layoutId={"ztI_6600l"}
														style={{
															"--framer-link-text-color": "rgb(0, 153, 255)",
															"--framer-link-text-decoration": "underline",
														}}
														verticalAlignment={"top"}
														withExternalLayout={true}
													>
														<React2.Fragment>
															<motion3.p
																className={"framer-styles-preset-11j7728"}
																data-styles-preset={"nWaHBmz7N"}
															>
																{"Company"}
															</motion3.p>
															<motion3.p
																className={"framer-styles-preset-11j7728"}
																data-styles-preset={"nWaHBmz7N"}
															>
																{"CMB LLC"}
															</motion3.p>
														</React2.Fragment>
													</RichText>
												</motion3.div>
											</motion3.div>,
											<motion3.div
												className={"framer-1r3791s"}
												data-border={true}
												data-framer-name={"Lead 4th"}
												layoutDependency={layoutDependency}
												layoutId={"bYCpmIqLS"}
												style={{
													"--border-bottom-width": "1px",
													"--border-color":
														"var(--token-313dd4d6-9859-4bdd-889b-954a849d13e3, rgb(34, 34, 34))",
													"--border-left-width": "1px",
													"--border-right-width": "1px",
													"--border-style": "solid",
													"--border-top-width": "1px",
													backgroundColor:
														"var(--token-cfb0af42-62a5-486a-837b-9870b5e7030b, rgba(255, 255, 255, 0.05))",
													borderBottomLeftRadius: 4,
													borderBottomRightRadius: 4,
													borderTopLeftRadius: 4,
													borderTopRightRadius: 4,
												}}
											>
												<motion3.div
													className={"framer-8cr0kg"}
													data-framer-name={"Top container"}
													layoutDependency={layoutDependency}
													layoutId={"Ulz20DLRO"}
													style={{
														borderBottomLeftRadius: 4,
														borderBottomRightRadius: 4,
														borderTopLeftRadius: 4,
														borderTopRightRadius: 4,
													}}
												>
													<motion3.div
														className={"framer-pj1uyo"}
														data-framer-name={"Profile holder"}
														layoutDependency={layoutDependency}
														layoutId={"HaLApP9j2"}
														style={{
															backgroundColor: "rgba(255, 255, 255, 0.12)",
															borderBottomLeftRadius: 36,
															borderBottomRightRadius: 36,
															borderTopLeftRadius: 36,
															borderTopRightRadius: 36,
														}}
													>
														<SVG
															className={"framer-11d54kq"}
															data-framer-name={"Graphic"}
															layout={"position"}
															layoutDependency={layoutDependency}
															layoutId={"X9shFIbj0"}
															opacity={0.9}
															style={{
																opacity: 0.9,
															}}
															svg={
																'<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><path d="M 16.5 7.063 C 16.5 10.258 14.57 13 12 13 C 9.428 13 7.5 10.258 7.5 7.062 C 7.5 3.868 9.16 2 12 2 C 14.84 2 16.5 3.867 16.5 7.063 Z M 4.102 20.142 C 4.487 20.6 6.145 22 12 22 C 17.855 22 19.512 20.6 19.898 20.143 C 19.97 20.054 20.003 19.94 19.988 19.826 C 19.9 18.944 19.106 15 12 15 C 4.894 15 4.1 18.944 4.011 19.826 C 3.996 19.94 4.029 20.054 4.102 20.143 Z" fill="rgb(255, 255, 255)"></path></svg>'
															}
															svgContentId={12334961471}
															withExternalLayout={true}
														/>
													</motion3.div>
													<motion3.div
														className={"framer-13hx92a"}
														data-framer-name={"name & position"}
														layoutDependency={layoutDependency}
														layoutId={"p6a7WWXC3"}
													>
														<RichText
															__fromCanvasComponent={true}
															className={"framer-ojtelm"}
															fonts={["Inter"]}
															layoutDependency={layoutDependency}
															layoutId={"EQweaYl_q"}
															style={{
																"--framer-link-text-color": "rgb(0, 153, 255)",
																"--framer-link-text-decoration": "underline",
															}}
															verticalAlignment={"top"}
															withExternalLayout={true}
														>
															<React2.Fragment>
																<motion3.p
																	className={"framer-styles-preset-1kdv3c8"}
																	data-styles-preset={"PDoVxFHq4"}
																>
																	{"Thomas Shelby"}
																</motion3.p>
															</React2.Fragment>
														</RichText>
														<RichText
															__fromCanvasComponent={true}
															className={"framer-hjuq5o"}
															fonts={["Inter"]}
															layoutDependency={layoutDependency}
															layoutId={"FlZvQxqiG"}
															style={{
																"--framer-link-text-color": "rgb(0, 153, 255)",
																"--framer-link-text-decoration": "underline",
															}}
															verticalAlignment={"top"}
															withExternalLayout={true}
														>
															<React2.Fragment>
																<motion3.p
																	className={"framer-styles-preset-11j7728"}
																	data-styles-preset={"nWaHBmz7N"}
																>
																	{"Founder"}
																</motion3.p>
															</React2.Fragment>
														</RichText>
													</motion3.div>
													<motion3.div
														className={"framer-s8wgsw"}
														data-border={true}
														layoutDependency={layoutDependency}
														layoutId={"Pcxsenapa"}
														style={{
															"--border-bottom-width": "1px",
															"--border-color":
																"var(--token-313dd4d6-9859-4bdd-889b-954a849d13e3, rgb(34, 34, 34))",
															"--border-left-width": "1px",
															"--border-right-width": "1px",
															"--border-style": "solid",
															"--border-top-width": "1px",
															backgroundColor:
																"var(--token-cfb0af42-62a5-486a-837b-9870b5e7030b, rgba(255, 255, 255, 0.05))",
															borderBottomLeftRadius: 8,
															borderBottomRightRadius: 8,
															borderTopLeftRadius: 8,
															borderTopRightRadius: 8,
														}}
													>
														<RichText
															__fromCanvasComponent={true}
															className={"framer-ael8nb"}
															fonts={["Inter"]}
															layoutDependency={layoutDependency}
															layoutId={"T_RIqRPcC"}
															style={{
																"--framer-link-text-color": "rgb(0, 153, 255)",
																"--framer-link-text-decoration": "underline",
															}}
															verticalAlignment={"top"}
															withExternalLayout={true}
														>
															<React2.Fragment>
																<motion3.p
																	className={"framer-styles-preset-11j7728"}
																	data-styles-preset={"nWaHBmz7N"}
																>
																	{"Verified"}
																</motion3.p>
															</React2.Fragment>
														</RichText>
													</motion3.div>
												</motion3.div>
												<motion3.div
													className={"framer-1v9f8ts"}
													data-framer-name={"Full detail grid"}
													layoutDependency={layoutDependency}
													layoutId={"PVaL4V3wK"}
												>
													<RichText
														__fromCanvasComponent={true}
														className={"framer-1htce6j"}
														fonts={["Inter"]}
														layoutDependency={layoutDependency}
														layoutId={"mDAHurddx"}
														style={{
															"--framer-link-text-color": "rgb(0, 153, 255)",
															"--framer-link-text-decoration": "underline",
														}}
														verticalAlignment={"top"}
														withExternalLayout={true}
													>
														<React2.Fragment>
															<motion3.p
																className={"framer-styles-preset-11j7728"}
																data-styles-preset={"nWaHBmz7N"}
															>
																{"E-mail"}
															</motion3.p>
															<motion3.p
																className={"framer-styles-preset-11j7728"}
																data-styles-preset={"nWaHBmz7N"}
															>
																{"Thimas@Sby.com"}
															</motion3.p>
														</React2.Fragment>
													</RichText>
													<RichText
														__fromCanvasComponent={true}
														className={"framer-1m9jz89"}
														fonts={["Inter"]}
														layoutDependency={layoutDependency}
														layoutId={"GkWvkULBd"}
														style={{
															"--framer-link-text-color": "rgb(0, 153, 255)",
															"--framer-link-text-decoration": "underline",
														}}
														verticalAlignment={"top"}
														withExternalLayout={true}
													>
														<React2.Fragment>
															<motion3.p
																className={"framer-styles-preset-11j7728"}
																data-styles-preset={"nWaHBmz7N"}
															>
																{"Company"}
															</motion3.p>
															<motion3.p
																className={"framer-styles-preset-11j7728"}
																data-styles-preset={"nWaHBmz7N"}
															>
																{"Shelby.co"}
															</motion3.p>
														</React2.Fragment>
													</RichText>
												</motion3.div>
											</motion3.div>,
										]}
										startFrom={0}
										style={{
											height: "100%",
											width: "100%",
										}}
										transitionControl={{
											delay: 0,
											duration: 0.5,
											ease: [0.44, 0, 0.56, 1],
											type: "tween",
										}}
										width={"100%"}
									/>
								</SmartComponentScopedContainer>
							</ComponentViewportProvider>
						</motion3.div>
						<motion3.div
							className={"framer-96xr9c"}
							data-framer-name={"Bottom container"}
							layoutDependency={layoutDependency}
							layoutId={"YeV0HyeV0"}
						>
							<motion3.div
								className={"framer-kze2uf"}
								data-framer-name={"progress"}
								layoutDependency={layoutDependency}
								layoutId={"CWYDQmwMt"}
							>
								<ComponentViewportProvider
									height={25}
									width={`max(${componentViewport?.width || "100vw"} - 60px, 1px)`}
									y={
										(componentViewport?.y || 0) +
										10 +
										(0 +
											(59 +
												Math.max(
													0,
													((componentViewport?.height || 280) - 20 - 116) / 1,
												) *
													1) +
											10) +
										0 +
										0 +
										0
									}
								>
									<SmartComponentScopedContainer
										className={"framer-kmz8bv-container"}
										layoutDependency={layoutDependency}
										layoutId={"TaC6mkFdt-container"}
										nodeId={"TaC6mkFdt"}
										rendersWithMotion={true}
										scopeId={"XyIROVeU0"}
									>
										{_jsx3(stdin_default, {
											height: "100%",
											id: "TaC6mkFdt",
											layoutId: "TaC6mkFdt",
											style: {
												height: "100%",
												width: "100%",
											},
											variant: "icDt0cdGI",
											width: "100%",
										})}
									</SmartComponentScopedContainer>
								</ComponentViewportProvider>
							</motion3.div>
							<motion3.div
								className={"framer-1ut08lh"}
								data-framer-name={"status"}
								layoutDependency={layoutDependency}
								layoutId={"hqyrgXfXK"}
								style={{
									borderBottomLeftRadius: 2,
									borderBottomRightRadius: 2,
									borderTopLeftRadius: 2,
									borderTopRightRadius: 2,
								}}
							>
								<RichText
									__fromCanvasComponent={true}
									className={"framer-3adum7"}
									fonts={["Inter"]}
									layoutDependency={layoutDependency}
									layoutId={"PVBGOyEkZ"}
									style={{
										"--framer-link-text-color": "rgb(0, 153, 255)",
										"--framer-link-text-decoration": "underline",
									}}
									verticalAlignment={"top"}
									withExternalLayout={true}
								>
									<React2.Fragment>
										<motion3.p
											className={"framer-styles-preset-1kdv3c8"}
											data-styles-preset={"PDoVxFHq4"}
										>
											{"Draft"}
										</motion3.p>
									</React2.Fragment>
								</RichText>
								<RichText
									__fromCanvasComponent={true}
									className={"framer-1s7915l"}
									fonts={["Inter"]}
									layoutDependency={layoutDependency}
									layoutId={"dh2BR2wwu"}
									style={{
										"--framer-link-text-color": "rgb(0, 153, 255)",
										"--framer-link-text-decoration": "underline",
									}}
									verticalAlignment={"top"}
									withExternalLayout={true}
								>
									<React2.Fragment>
										<motion3.p
											className={"framer-styles-preset-1kdv3c8"}
											data-styles-preset={"PDoVxFHq4"}
										>
											{"Schedule"}
										</motion3.p>
									</React2.Fragment>
								</RichText>
								<RichText
									__fromCanvasComponent={true}
									className={"framer-127jpqu"}
									fonts={["Inter"]}
									layoutDependency={layoutDependency}
									layoutId={"dwuVu2O2i"}
									style={{
										"--framer-link-text-color": "rgb(0, 153, 255)",
										"--framer-link-text-decoration": "underline",
									}}
									verticalAlignment={"top"}
									withExternalLayout={true}
								>
									<React2.Fragment>
										<motion3.p
											className={"framer-styles-preset-1kdv3c8"}
											data-styles-preset={"PDoVxFHq4"}
										>
											{"Sent"}
										</motion3.p>
									</React2.Fragment>
								</RichText>
							</motion3.div>
						</motion3.div>
					</motion3.div>
				</Transition2>
			</Variants2>
		</LayoutGroup3>
	);
});
var css4 = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-RtwLd.framer-vqlg0u, .framer-RtwLd .framer-vqlg0u { display: block; }",
	".framer-RtwLd.framer-1hijlhj { align-content: center; align-items: center; display: flex; flex-direction: column; flex-wrap: nowrap; gap: 5px; height: 280px; justify-content: flex-start; overflow: hidden; padding: 10px; position: relative; width: 280px; will-change: var(--framer-will-change-override, transform); }",
	".framer-RtwLd .framer-16ws62c { align-content: center; align-items: center; display: flex; flex: none; flex-direction: column; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: 100%; }",
	".framer-RtwLd .framer-1iaubn2, .framer-RtwLd .framer-1ut08lh { align-content: center; align-items: center; display: flex; flex: none; flex-direction: row; flex-wrap: nowrap; height: min-content; justify-content: space-between; overflow: hidden; padding: 5px; position: relative; width: 100%; will-change: var(--framer-will-change-override, transform); }",
	".framer-RtwLd .framer-hwnrl5 { align-content: center; align-items: center; display: flex; flex: none; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: center; overflow: hidden; padding: 5px; position: relative; width: min-content; will-change: var(--framer-will-change-override, transform); }",
	".framer-RtwLd .framer-1q6e4a1, .framer-RtwLd .framer-36hojt, .framer-RtwLd .framer-1mm553r, .framer-RtwLd .framer-1q7axti, .framer-RtwLd .framer-1b8jg25, .framer-RtwLd .framer-1bcx6sm, .framer-RtwLd .framer-ecjxqh, .framer-RtwLd .framer-j5fsxw, .framer-RtwLd .framer-13ffgtk, .framer-RtwLd .framer-1jeeqw6, .framer-RtwLd .framer-1x1sgv0, .framer-RtwLd .framer-16570bf, .framer-RtwLd .framer-1l4w8tu, .framer-RtwLd .framer-ojtelm, .framer-RtwLd .framer-hjuq5o, .framer-RtwLd .framer-ael8nb, .framer-RtwLd .framer-3adum7, .framer-RtwLd .framer-1s7915l, .framer-RtwLd .framer-127jpqu { flex: none; height: auto; position: relative; white-space: pre; width: auto; }",
	".framer-RtwLd .framer-11yusqg { align-content: center; align-items: center; display: flex; flex: none; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: min-content; will-change: var(--framer-will-change-override, transform); }",
	".framer-RtwLd .framer-bte77q-container { flex: none; height: 18px; position: relative; width: 18px; }",
	".framer-RtwLd .framer-g2wf5d { align-content: center; align-items: center; display: flex; flex: none; flex-direction: row; flex-wrap: nowrap; gap: 8px; height: min-content; justify-content: flex-start; overflow: hidden; padding: 0px; position: relative; width: 100%; }",
	".framer-RtwLd .framer-9z78ez, .framer-RtwLd .framer-7s5aal, .framer-RtwLd .framer-1w5t8tj, .framer-RtwLd .framer-jk7xf5, .framer-RtwLd .framer-9nqt77, .framer-RtwLd .framer-7bloxn, .framer-RtwLd .framer-s8wgsw { align-content: center; align-items: center; display: flex; flex: none; flex-direction: row; flex-wrap: nowrap; gap: 2px; height: min-content; justify-content: center; overflow: visible; padding: 3px 8px 3px 8px; position: relative; width: min-content; }",
	".framer-RtwLd .framer-ix8t27 { align-content: center; align-items: center; display: flex; flex: 1 0 0px; flex-direction: column; flex-wrap: nowrap; gap: 10px; height: 1px; justify-content: center; overflow: hidden; padding: 10px 0px 10px 0px; position: relative; width: 100%; }",
	".framer-RtwLd .framer-mrto5s-container { flex: none; height: 90px; position: relative; width: 100%; }",
	".framer-RtwLd .framer-102fscf, .framer-RtwLd .framer-h1vp5b, .framer-RtwLd .framer-vxlryj, .framer-RtwLd .framer-1r3791s { align-content: center; align-items: center; display: flex; flex-direction: column; flex-wrap: nowrap; gap: 15px; height: 85px; justify-content: center; overflow: hidden; padding: 10px; position: relative; width: 260px; will-change: var(--framer-will-change-override, transform); }",
	".framer-RtwLd .framer-bd1rla, .framer-RtwLd .framer-loic76, .framer-RtwLd .framer-poo8dj, .framer-RtwLd .framer-8cr0kg { align-content: center; align-items: center; display: flex; flex: none; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: 100%; will-change: var(--framer-will-change-override, transform); }",
	".framer-RtwLd .framer-148av47, .framer-RtwLd .framer-7buygd, .framer-RtwLd .framer-6t6228, .framer-RtwLd .framer-pj1uyo { aspect-ratio: 1 / 1; flex: none; height: var(--framer-aspect-ratio-supported, 35px); overflow: hidden; position: relative; width: 28px; will-change: var(--framer-will-change-override, transform); }",
	".framer-RtwLd .framer-19pi5ck, .framer-RtwLd .framer-1i1xp44, .framer-RtwLd .framer-11c8c42, .framer-RtwLd .framer-11d54kq { flex: none; height: 24px; left: calc(50.00000000000002% - 24px / 2); position: absolute; top: calc(50.00000000000002% - 24px / 2); width: 24px; }",
	".framer-RtwLd .framer-ake1lg, .framer-RtwLd .framer-v0i74l, .framer-RtwLd .framer-emjpsn, .framer-RtwLd .framer-13hx92a { align-content: flex-start; align-items: flex-start; display: flex; flex: 1 0 0px; flex-direction: column; flex-wrap: nowrap; gap: 5px; height: min-content; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: 1px; }",
	".framer-RtwLd .framer-ymtord, .framer-RtwLd .framer-fpg75d, .framer-RtwLd .framer-11u4xr3, .framer-RtwLd .framer-1v9f8ts { align-content: center; align-items: center; display: flex; flex: none; flex-direction: row; flex-wrap: nowrap; height: min-content; justify-content: space-between; overflow: hidden; padding: 0px; position: relative; width: 100%; }",
	".framer-RtwLd .framer-1x88cpf, .framer-RtwLd .framer-1cq1zhm, .framer-RtwLd .framer-tjdb2, .framer-RtwLd .framer-ks0yro, .framer-RtwLd .framer-1yel9pj, .framer-RtwLd .framer-1fgrzi5, .framer-RtwLd .framer-1htce6j, .framer-RtwLd .framer-1m9jz89 { flex: 1 0 0px; height: auto; position: relative; white-space: pre-wrap; width: 1px; word-break: break-word; word-wrap: break-word; }",
	".framer-RtwLd .framer-96xr9c { align-content: center; align-items: center; display: flex; flex: none; flex-direction: column; flex-wrap: nowrap; gap: 0px; height: min-content; justify-content: center; overflow: hidden; padding: 0px 10px 0px 10px; position: relative; width: 100%; }",
	".framer-RtwLd .framer-kze2uf { align-content: center; align-items: center; display: flex; flex: none; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: center; overflow: hidden; padding: 0px 10px 0px 10px; position: relative; width: 100%; }",
	".framer-RtwLd .framer-kmz8bv-container { flex: 1 0 0px; height: 25px; position: relative; width: 1px; }",
	...css2,
	...css,
	'.framer-RtwLd[data-border="true"]::after, .framer-RtwLd [data-border="true"]::after { content: ""; border-width: var(--border-top-width, 0) var(--border-right-width, 0) var(--border-bottom-width, 0) var(--border-left-width, 0); border-color: var(--border-color, none); border-style: var(--border-style, none); width: 100%; height: 100%; position: absolute; box-sizing: border-box; left: 0; top: 0; border-radius: inherit; pointer-events: none; }',
];
var FramerXyIROVeU0 = withCSS2(Component3, css4, "framer-RtwLd");
var stdin_default2 = FramerXyIROVeU0;
FramerXyIROVeU0.displayName = "sales and markteing";
FramerXyIROVeU0.defaultProps = {
	height: 280,
	width: 280,
};
addFonts2(
	FramerXyIROVeU0,
	[
		{
			explicitInter: true,
			fonts: [
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F",
					url: "https://framerusercontent.com/assets/5vvr9Vy74if2I6bQbJvbw7SY1pQ.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116",
					url: "https://framerusercontent.com/assets/EOr0mi4hNtlgWNn9if640EZzXCo.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+1F00-1FFF",
					url: "https://framerusercontent.com/assets/Y9k9QrlZAqio88Klkmbd8VoMQc.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+0370-03FF",
					url: "https://framerusercontent.com/assets/OYrD2tBIBPvoJXiIHnLoOXnY9M.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF",
					url: "https://framerusercontent.com/assets/JeYwfuaPfZHQhEG8U5gtPDZ7WQ.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD",
					url: "https://framerusercontent.com/assets/vQyevYAyHtARFwPqUzQGpnDs.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB",
					url: "https://framerusercontent.com/assets/b6Y37FthZeALduNqHicBT6FutY.woff2",
					weight: "400",
				},
			],
		},
		...PhosphorFonts,
		...SlideshowFonts,
		...ProgressFonts,
		...getFontsFromSharedStyle(fonts2),
		...getFontsFromSharedStyle(fonts),
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:sales-and-markteing
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"a8d1bf17543235875742a4578f1d6b2cd82ea3d1960d650561752b6f8ce8433b"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default2, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * Renders SalesAndMarkteingFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale, ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"a8d1bf17543235875742a4578f1d6b2cd82ea3d1960d650561752b6f8ce8433b"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default2}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default2);
var sales_and_markteing_default = ComponentWithRoot;
export { sales_and_markteing_default as default };
