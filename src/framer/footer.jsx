// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project a8d1bf1754323587 "Xtract Template (copy)", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * variant?: 'Footer' | 'Mobile' // Variant
}} Props

 */

/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */
import { className, css, fonts } from "./chunks/chunk-BQCN2VJ7.js";
import { routes } from "./chunks/chunk-A46GJBWP.js";

// virtual:footer
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framer.com/m/Footer-duwg.js
import { jsx as _jsx3, jsxs as _jsxs2 } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls as addPropertyControls3,
	ComponentViewportProvider,
	ControlType as ControlType3,
	cx,
	getFonts,
	getFontsFromSharedStyle,
	Link,
	RichText,
	SmartComponentScopedContainer,
	SVG,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS as withCSS2,
} from "unframer";
import { LayoutGroup, motion as motion2, MotionConfigContext } from "unframer";
import * as React from "react";
import { useRef } from "react";

// /:https://framerusercontent.com/modules/0dfzTKPSzK8b138I1Gsl/PH4CFyFMG7CUSDQ9vm89/Input_Waitlist.js
import { jsx as _jsx2 } from "react/jsx-runtime";

// /:https://framer.com/m/framer/InputSites.js@1.12.0
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useCallback, useState } from "react";
import {
	addPropertyControls,
	ControlType,
	withCSS,
	useRouter,
	inferInitialRouteFromPath,
} from "unframer";
import { motion, useAnimationControls } from "unframer";
var emailRegex =
	/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
var mailchimpRegex = /^https?:\/\/([^\/]+)[^\?]+\??(.+)$/;
var validateEmail = (email) => {
	return emailRegex.test(String(email).toLowerCase());
};
var parseMailChimpUrl = (url) => {
	var _url_replace_match;
	const [, domain, parameters] =
		(_url_replace_match = url.replace("&amp;", "&").match(mailchimpRegex)) !==
			null && _url_replace_match !== void 0
			? _url_replace_match
			: [null, null, null];
	return [domain, parameters ? new URLSearchParams(parameters) : null];
};
function safeURL(url) {
	console.log(url);
	try {
		new URL(url);
		return url;
	} catch {
		try {
			new URL(`https://${url}`);
			return `https://${url}`;
		} catch {}
	}
	return void 0;
}
function isInternalURL(href) {
	if (href === void 0) return false;
	if (href.startsWith("#") || href.startsWith("/") || href.startsWith("."))
		return true;
	return false;
}
var VERSION = "v1";
var Input = withCSS(
	function Input2({
		service,
		redirectAs,
		mailchimpURL,
		loopsID,
		loopsUserGroup,
		formsparkID,
		getwaitlistAPI,
		convertkitAPI,
		convertkitFormID,
		input,
		button,
		font,
		layout,
		link,
		gap,
		style,
		onSubmit,
	}) {
		const [email, setEmail] = useState("");
		const [isError, setError] = useState(false);
		const [isLoading, setLoading] = useState(false);
		const [isFocus, setFocus] = useState(false);
		const {
			paddingPerSide,
			paddingTop,
			paddingRight,
			paddingBottom,
			paddingLeft,
			padding,
			borderRadius,
			borderObject,
			focusObject,
			shadowObject,
			height,
			fixedHeight,
		} = input;
		const {
			buttonPaddingPerSide,
			buttonPaddingTop,
			buttonPaddingRight,
			buttonPaddingBottom,
			buttonPaddingLeft,
			buttonPadding,
		} = button;
		const paddingValue = paddingPerSide
			? `${paddingTop}px ${button.isDocked ? paddingRight + button.widthWhenDocked : paddingRight}px ${paddingBottom}px ${paddingLeft}px`
			: `${padding}px ${button.isDocked ? padding + button.widthWhenDocked : padding}px ${padding}px ${padding}px`;
		const buttonPaddingValue = buttonPaddingPerSide
			? `${button.isDocked ? 0 : buttonPaddingTop}px ${buttonPaddingRight}px ${button.isDocked ? 0 : buttonPaddingBottom}px ${buttonPaddingLeft}px`
			: `${button.isDocked ? 0 : buttonPadding}px ${buttonPadding}px ${button.isDocked ? 0 : buttonPadding}px ${buttonPadding}px`;
		const router = useRouter();
		const onSuccess = () => {
			setLoading(false);
			setFocus(false);
			setEmail("");
			if (redirectAs === "link" && link && !isError) {
				const [path, hash] = link.split("#");
				const { routeId, pathVariables } = inferInitialRouteFromPath(
					router.routes,
					path,
				);
				if (routeId) {
					router.navigate(routeId, hash, pathVariables);
				}
				if (!isInternalURL(link)) {
					const url = safeURL(link);
					if (url) window.open(url, "_blank");
				}
			}
		};
		const validateForm = useCallback(
			(email2) => {
				if (email2 === "" || !validateEmail(email2)) {
					setError(true);
					formControls.start("error");
					return false;
				}
				return true;
			},
			[validateEmail],
		);
		const handleChange = useCallback((event) => {
			setError(false);
			setEmail(event.target.value);
		}, []);
		const handleFocus = useCallback((event) => {
			setFocus(true);
		}, []);
		const handleBlur = useCallback((event) => {
			setFocus(false);
			setError(false);
		}, []);
		const handleSubmit = useCallback(
			(event) => {
				event.preventDefault();
				if (isLoading) return;
				setLoading(true);
				if (service === "mailchimp") {
					const [domain, parameters] = parseMailChimpUrl(mailchimpURL);
					if (!validateForm(email) || !domain || !parameters) {
						setLoading(false);
						return;
					}
					parameters.set("MERGE0", email);
					fetch(`https://${domain}/subscribe/post`, {
						method: "POST",
						mode: "no-cors",
						headers: {
							"Content-Type": "application/x-www-form-urlencoded;charset=UTF-8",
						},
						body: parameters.toString(),
					})
						.then((response) => {
							onSuccess();
							if (redirectAs === "overlay")
								onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit();
						})
						.catch((error) => {
							console.error(error);
							setLoading(false);
							setError(true);
							formControls.start("error");
						});
				}
				if (service === "loops") {
					if (!validateForm(email)) {
						setLoading(false);
						return;
					}
					const emailBody = `email=${encodeURIComponent(email)}`;
					const userGroupBody = `userGroup=${encodeURIComponent(loopsUserGroup)}`;
					const hasUserGroup = !!loopsUserGroup && loopsUserGroup !== " ";
					const formBody = hasUserGroup
						? emailBody + "&" + userGroupBody
						: emailBody;
					fetch(`https://app.loops.so/api/newsletter-form/${loopsID}`, {
						method: "POST",
						mode: "no-cors",
						headers: {
							"Content-Type": "application/x-www-form-urlencoded",
						},
						body: formBody,
					})
						.then(() => {
							onSuccess();
							if (redirectAs === "overlay")
								onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit();
						})
						.catch((error) => {
							console.error(error);
							setLoading(false);
							setError(true);
							formControls.start("error");
						});
				}
				if (service === "formspark") {
					if (!validateForm(email)) {
						setLoading(false);
						return;
					}
					const data = new FormData(event.target);
					const entries = Object.fromEntries(data.entries());
					fetch(`https://api.formspark.io/${formsparkID}`, {
						method: "POST",
						headers: {
							"Content-Type": "application/json",
							Accept: "application/json",
						},
						body: JSON.stringify(entries),
					})
						.then(() => {
							onSuccess();
							onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit();
						})
						.catch((error) => {
							console.error(error);
							setLoading(false);
							setError(true);
							formControls.start("error");
						});
				}
				if (service === "getwaitlist") {
					if (!validateForm(email)) {
						setLoading(false);
						return;
					}
					const formData = new FormData(event.target);
					const data = Object.fromEntries(formData.entries());
					data.referral_link = document.URL;
					fetch(
						`https://api.getwaitlist.com/api/v1
/waiter/`,
						{
							method: "POST",
							headers: {
								"Content-Type": "application/json",
								Accept: "application/json",
							},
							body: JSON.stringify(data),
						},
					)
						.then(() => {
							onSuccess();
							if (redirectAs === "overlay")
								onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit();
						})
						.catch((error) => {
							console.error(error);
							setLoading(false);
							setError(true);
							formControls.start("error");
						});
				}
				if (service === "convertkit") {
					if (!validateForm(email)) {
						setLoading(false);
						return;
					}
					const formData = new FormData(event.target);
					const data = Object.fromEntries(formData.entries());
					data.referral_link = document.URL;
					data.api_key = convertkitAPI;
					fetch(
						`https://api.convertkit.com/v3/forms/${convertkitFormID}/subscribe`,
						{
							method: "POST",
							headers: {
								"Content-Type": "application/json",
								Accept: "application/json",
							},
							body: JSON.stringify(data),
						},
					)
						.then(() => {
							onSuccess();
							if (redirectAs === "overlay")
								onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit();
						})
						.catch((error) => {
							console.error(error);
							setLoading(false);
							setError(true);
							formControls.start("error");
						});
				}
			},
			[
				mailchimpURL,
				formsparkID,
				convertkitFormID,
				email,
				onSubmit,
				validateForm,
				isLoading,
			],
		);
		const formControls = useAnimationControls();
		const focusStylesFrom = input.focusObject
			? `inset 0 0 0 ${focusObject.focusWidthFrom}px ${focusObject.focusColor}`
			: null;
		const focusStylesTo = input.focusObject
			? `inset 0 0 0 ${focusObject.focusWidthTo}px ${focusObject.focusColor}`
			: null;
		const shadowStyles = input.shadowObject
			? `${shadowObject.shadowX}px ${shadowObject.shadowY}px ${shadowObject.shadowBlur}px ${shadowObject.shadowColor}`
			: null;
		const borderStyles = input.borderObject
			? `inset 0 0 0 ${borderObject.borderWidth}px ${borderObject.borderColor}`
			: null;
		const formVariants = {
			default: {
				x: 0,
			},
			error: {
				x: [0, -4, 4, 0],
				transition: {
					duration: 0.2,
				},
			},
		};
		const inputVariants = {
			default: {
				boxShadow: dynamicBoxShadow(
					focusStylesFrom,
					shadowStyles,
					borderStyles,
				),
			},
			focused: {
				boxShadow: dynamicBoxShadow(focusStylesTo, shadowStyles, borderStyles),
			},
		};
		return (
			<motion.div
				style={{
					...style,
					...containerStyles,
					"--framer-custom-placeholder-color": input.placeholderColor,
				}}
				variants={formVariants}
				animate={formControls}
			>
				<form
					style={{
						width: "100%",
						height: "auto",
						display: "flex",
						position: "relative",
						flexDirection: layout === "vertical" ? "column" : "row",
						color: button.color,
						gap: button.isDocked ? 0 : gap,
					}}
					onSubmit={handleSubmit}
					method={"POST"}
				>
					{service === "getwaitlist" && (
						<input type={"hidden"} name={"api_key"} value={getwaitlistAPI} />
					)}
					{service === "convertkit" && (
						<input type={"hidden"} name={"api_key"} value={convertkitAPI} />
					)}
					<motion.input
						type={"email"}
						name={"email"}
						placeholder={input.placeholder}
						value={email}
						className={`${VERSION} framer-custom-input`}
						onChange={handleChange}
						onFocus={handleFocus}
						onBlur={handleBlur}
						autoComplete={"off"}
						autoCapitalize={"off"}
						autoCorrect={"off"}
						spellCheck={"false"}
						style={{
							...defaultStyle,
							padding: paddingValue,
							borderRadius,
							fontSize: 16,
							...font,
							background: input.fill,
							height: height ? "auto" : fixedHeight,
							color: input.color,
							boxShadow: dynamicBoxShadow(
								focusStylesFrom,
								shadowStyles,
								borderStyles,
							),
						}}
						variants={inputVariants}
						initial={false}
						animate={isFocus ? "focused" : "default"}
						transition={{
							duration: 0.3,
						}}
						data-1p-ignore={true}
					/>
					{!button.shouldAppear && isLoading && (
						<Spinner
							shouldAppear={button.shouldAppear}
							paddingPerSide={paddingPerSide}
							paddingTop={paddingTop}
							paddingRight={paddingRight}
							padding={padding}
							color={input.color}
						/>
					)}
					{button.shouldAppear && (
						<div
							style={{
								position: button.isDocked ? "absolute" : "relative",
								top: button.isDocked ? button.insetWhenDocked : 0,
								right: button.isDocked ? button.insetWhenDocked : 0,
								bottom: button.isDocked ? button.insetWhenDocked : 0,
							}}
						>
							<motion.input
								type={"submit"}
								value={button.label}
								style={{
									...defaultStyle,
									width: button.isDocked ? button.widthWhenDocked : "100%",
									height: height ? "100%" : fixedHeight,
									cursor: "pointer",
									padding: buttonPaddingValue,
									borderRadius: button.isDocked
										? borderRadius - button.insetWhenDocked
										: borderRadius,
									// fontWeight: button.fontWeight,
									fontSize: 16,
									...button.buttonFont,
									background: button.fill,
									color: button.color,
									zIndex: 1,
									boxShadow: getButtonShadow(button),
								}}
							/>
							{isLoading && (
								<div
									style={{
										borderRadius: button.isDocked
											? borderRadius - button.insetWhenDocked
											: borderRadius,
										position: "absolute",
										display: "flex",
										justifyContent: "center",
										alignItems: "center",
										width: "100%",
										height: "100%",
										inset: 0,
										zIndex: 2,
										color: button.color,
										background: button.fill,
									}}
								>
									<Spinner color={button.color} />
								</div>
							)}
						</div>
					)}
				</form>
			</motion.div>
		);
	},
	[
		`.${VERSION}.framer-custom-input::placeholder { color: var(--framer-custom-placeholder-color) !important; }`,
	],
);
var Spinner = (props) => {
	const noButtonStyles = !props.shouldAppear
		? {
				position: "absolute",
				top: `calc(50% - 8px)`,
				right: props.paddingPerSide ? props.paddingRight : props.padding,
			}
		: {};
	return (
		<motion.div
			style={{
				height: 16,
				width: 16,
				...noButtonStyles,
			}}
			initial={{
				rotate: 0,
			}}
			animate={{
				rotate: 360,
			}}
			transition={{
				duration: 1,
				repeat: Infinity,
			}}
		>
			<motion.div
				initial={{
					scale: 0,
				}}
				animate={{
					scale: 1,
				}}
			>
				<svg
					xmlns={"http://www.w3.org/2000/svg"}
					width={"16"}
					height={"16"}
					style={{
						fill: "currentColor",
						color: props.color,
					}}
				>
					<path
						d={
							"M 8 0 C 3.582 0 0 3.582 0 8 C 0 12.419 3.582 16 8 16 C 12.418 16 16 12.419 16 8 C 15.999 3.582 12.418 0 8 0 Z M 8 14 C 4.687 14 2 11.314 2 8 C 2 4.687 4.687 2 8 2 C 11.314 2 14 4.687 14 8 C 14 11.314 11.314 14 8 14 Z"
						}
						fill={"currentColor"}
						opacity={"0.2"}
					/>
					<path
						d={
							"M 8 0 C 12.418 0 15.999 3.582 16 8 C 16 8 16 9 15 9 C 14 9 14 8 14 8 C 14 4.687 11.314 2 8 2 C 4.687 2 2 4.687 2 8 C 2 8 2 9 1 9 C 0 9 0 8 0 8 C 0 3.582 3.582 0 8 0 Z"
						}
						fill={"currentColor"}
					/>
				</svg>
			</motion.div>
		</motion.div>
	);
};
addPropertyControls(Input, {
	service: {
		title: "Service",
		type: ControlType.Enum,
		options: ["loops", "formspark", "mailchimp", "getwaitlist", "convertkit"],
		optionTitles: [
			"Loops",
			"FormSpark",
			"MailChimp",
			"Get Waitlist",
			"ConvertKit",
		],
		defaultValue: "loops",
	},
	mailchimpURL: {
		title: "URL",
		placeholder: "https://***.us6.list-manage.com/subscribe/post?u=***",
		type: ControlType.String,
		hidden: (props) => props.service !== "mailchimp",
	},
	loopsID: {
		title: "ID",
		placeholder: "klm2jxy0i98abzr01pq7defg5",
		type: ControlType.String,
		hidden: (props) => props.service !== "loops",
	},
	loopsUserGroup: {
		title: "User Group",
		type: ControlType.String,
		placeholder: "Title",
		optional: true,
		hidden: (props) => props.service !== "loops",
	},
	formsparkID: {
		title: "ID",
		placeholder: "7PbPpGN3",
		type: ControlType.String,
		hidden: (props) => props.service !== "formspark",
	},
	getwaitlistAPI: {
		title: "ID",
		placeholder: "9148",
		type: ControlType.String,
		hidden: (props) => props.service !== "getwaitlist",
	},
	convertkitAPI: {
		title: "API Key",
		placeholder: "5opis1WK6xnVsBwrOINUpe",
		type: ControlType.String,
		hidden: (props) => props.service !== "convertkit",
	},
	convertkitFormID: {
		title: "Form ID",
		placeholder: "1043389",
		type: ControlType.String,
		hidden: (props) => props.service !== "convertkit",
	},
	redirectAs: {
		title: "Success",
		type: ControlType.Enum,
		options: ["link", "overlay"],
		optionTitles: ["Open Link", "Show Overlay"],
		defaultValue: "link",
	},
	link: {
		title: "Redirect",
		type: ControlType.Link,
		hidden: (props) => props.redirectAs === "overlay",
	},
	onSubmit: {
		title: "Submit",
		type: ControlType.EventHandler,
		hidden: (props) => props.redirectAs === "link",
	},
	layout: {
		title: "Layout",
		type: ControlType.Enum,
		options: ["horizontal", "vertical"],
		displaySegmentedControl: true,
		hidden: (props) => props.button.isDocked,
	},
	font: {
		type: ControlType.Font,
		title: "Font",
		controls: "extended",
	},
	input: {
		title: "Input",
		type: ControlType.Object,
		controls: {
			placeholder: {
				title: "Placeholder",
				type: ControlType.String,
				defaultValue: "name@email.com",
			},
			placeholderColor: {
				title: " ",
				type: ControlType.Color,
				defaultValue: "rgba(0, 0, 0, 0.3)",
			},
			fill: {
				title: "Fill",
				type: ControlType.Color,
				defaultValue: "#EBEBEB",
			},
			color: {
				title: "Text",
				type: ControlType.Color,
				defaultValue: "#000",
			},
			height: {
				title: "Height",
				type: ControlType.Boolean,
				enabledTitle: "Auto",
				disabledTitle: "Fixed",
			},
			fixedHeight: {
				title: " ",
				type: ControlType.Number,
				displayStepper: true,
				min: 0,
				defaultValue: 50,
				hidden: (props) => props.height,
			},
			padding: {
				title: "Padding",
				type: ControlType.FusedNumber,
				toggleKey: "paddingPerSide",
				toggleTitles: ["Padding", "Padding per side"],
				defaultValue: 15,
				valueKeys: [
					"paddingTop",
					"paddingRight",
					"paddingBottom",
					"paddingLeft",
				],
				valueLabels: ["T", "R", "B", "L"],
				min: 0,
			},
			borderRadius: {
				title: "Radius",
				type: ControlType.Number,
				displayStepper: true,
				min: 0,
				defaultValue: 8,
			},
			focusObject: {
				type: ControlType.Object,
				title: "Focus",
				optional: true,
				controls: {
					focusWidthFrom: {
						title: "From",
						type: ControlType.Number,
						displayStepper: true,
						defaultValue: 0,
					},
					focusWidthTo: {
						title: "To",
						type: ControlType.Number,
						displayStepper: true,
						defaultValue: 2,
					},
					focusColor: {
						title: "Color",
						type: ControlType.Color,
						defaultValue: "#09F",
					},
				},
			},
			borderObject: {
				type: ControlType.Object,
				title: "Border",
				optional: true,
				controls: {
					borderWidth: {
						title: "Width",
						type: ControlType.Number,
						displayStepper: true,
						defaultValue: 1,
					},
					borderColor: {
						title: "Color",
						type: ControlType.Color,
						defaultValue: "rgba(200,200,200,0.5)",
					},
				},
			},
			shadowObject: {
				type: ControlType.Object,
				title: "Shadow",
				optional: true,
				controls: {
					shadowColor: {
						title: "Color",
						type: ControlType.Color,
						defaultValue: "rgba(0,0,0,0.25)",
					},
					shadowX: {
						title: "Shadow X",
						type: ControlType.Number,
						min: -100,
						max: 100,
						defaultValue: 0,
					},
					shadowY: {
						title: "Shadow Y",
						type: ControlType.Number,
						min: -100,
						max: 100,
						defaultValue: 2,
					},
					shadowBlur: {
						title: "Shadow B",
						type: ControlType.Number,
						min: 0,
						max: 100,
						defaultValue: 4,
					},
				},
			},
		},
	},
	button: {
		title: "Button",
		type: ControlType.Object,
		controls: {
			shouldAppear: {
				title: "Show",
				type: ControlType.Boolean,
				defaultValue: true,
			},
			label: {
				title: "Label",
				type: ControlType.String,
				defaultValue: "Subscribe",
			},
			buttonFont: {
				type: ControlType.Font,
				title: "Font",
				controls: "extended",
			},
			fill: {
				title: "Fill",
				type: ControlType.Color,
				defaultValue: "#333",
			},
			color: {
				title: "Text",
				type: ControlType.Color,
				defaultValue: "#FFF",
			},
			isDocked: {
				title: "Docked",
				type: ControlType.Boolean,
				defaultValue: false,
			},
			widthWhenDocked: {
				title: "Width",
				type: ControlType.Number,
				min: 0,
				defaultValue: 100,
				displayStepper: true,
				hidden: (props) => !props.isDocked,
			},
			insetWhenDocked: {
				title: "Inset",
				type: ControlType.Number,
				min: 0,
				defaultValue: 5,
				displayStepper: true,
				hidden: (props) => !props.isDocked,
			},
			buttonPadding: {
				title: "Padding",
				type: ControlType.FusedNumber,
				toggleKey: "buttonPaddingPerSide",
				toggleTitles: ["Padding", "Padding per side"],
				defaultValue: 15,
				valueKeys: [
					"buttonPaddingTop",
					"buttonPaddingRight",
					"buttonPaddingBottom",
					"buttonPaddingLeft",
				],
				valueLabels: ["T", "R", "B", "L"],
				min: 0,
			},
			buttonShadow: {
				type: ControlType.Object,
				title: "Shadow",
				optional: true,
				controls: {
					shadowColor: {
						title: "Color",
						type: ControlType.Color,
						defaultValue: "rgba(0,0,0,0.25)",
					},
					shadowX: {
						title: "Shadow X",
						type: ControlType.Number,
						min: -100,
						max: 100,
						defaultValue: 0,
					},
					shadowY: {
						title: "Shadow Y",
						type: ControlType.Number,
						min: -100,
						max: 100,
						defaultValue: 2,
					},
					shadowBlur: {
						title: "Shadow B",
						type: ControlType.Number,
						min: 0,
						max: 100,
						defaultValue: 4,
					},
				},
			},
		},
	},
	gap: {
		title: "Gap",
		type: ControlType.Number,
		displayStepper: true,
		min: 0,
		defaultValue: 10,
		hidden: (props) => props.button.isDocked,
	},
});
var defaultStyle = {
	WebkitAppearance: "none",
	appearance: "none",
	width: "100%",
	height: "auto",
	outline: "none",
	border: "none",
};
var containerStyles = {
	position: "relative",
	width: "100%",
	height: "100%",
	display: "flex",
	justifyContent: "center",
	alignItems: "center",
};
function getButtonShadow(button) {
	if (button.buttonShadow) {
		return `${button.buttonShadow.shadowX}px ${button.buttonShadow.shadowY}px ${button.buttonShadow.shadowBlur}px ${button.buttonShadow.shadowColor}`;
	} else return "none";
}
function dynamicBoxShadow(...shadows) {
	const output = [];
	shadows.forEach((shadow) => shadow && output.push(shadow));
	return output.join(", ");
}
var stdin_default = Input;

// /:https://framerusercontent.com/modules/0dfzTKPSzK8b138I1Gsl/PH4CFyFMG7CUSDQ9vm89/Input_Waitlist.js
import {
	ControlType as ControlType2,
	addPropertyControls as addPropertyControls2,
} from "unframer";
function Waitlist(props) {
	return _jsx2(stdin_default, {
		...props,
		service: "getwaitlist",
	});
}
addPropertyControls2(Waitlist, {
	getwaitlistAPI: {
		title: "ID",
		placeholder: "9148",
		type: ControlType2.String,
	},
	redirectAs: {
		title: "Success",
		type: ControlType2.Enum,
		options: ["link", "overlay"],
		optionTitles: ["Open Link", "Show Overlay"],
		defaultValue: "link",
	},
	link: {
		title: "Redirect",
		type: ControlType2.Link,
		hidden: (props) => props.redirectAs === "overlay",
	},
	onSubmit: {
		title: "Submit",
		type: ControlType2.EventHandler,
		hidden: (props) => props.redirectAs === "link",
	},
	layout: {
		title: "Layout",
		type: ControlType2.Enum,
		options: ["horizontal", "vertical"],
		displaySegmentedControl: true,
		hidden: (props) => props.button.isDocked,
	},
	font: {
		type: ControlType2.Font,
		title: "Font",
		controls: "extended",
	},
	input: {
		title: "Input",
		type: ControlType2.Object,
		controls: {
			placeholder: {
				title: "Placeholder",
				type: ControlType2.String,
				defaultValue: "name@email.com",
			},
			placeholderColor: {
				title: " ",
				type: ControlType2.Color,
				defaultValue: "rgba(0, 0, 0, 0.3)",
			},
			fill: {
				title: "Fill",
				type: ControlType2.Color,
				defaultValue: "#EBEBEB",
			},
			color: {
				title: "Text",
				type: ControlType2.Color,
				defaultValue: "#000",
			},
			height: {
				title: "Height",
				type: ControlType2.Boolean,
				enabledTitle: "Auto",
				disabledTitle: "Fixed",
			},
			fixedHeight: {
				title: " ",
				type: ControlType2.Number,
				displayStepper: true,
				min: 0,
				defaultValue: 50,
				hidden: (props) => props.height,
			},
			padding: {
				title: "Padding",
				type: ControlType2.FusedNumber,
				toggleKey: "paddingPerSide",
				toggleTitles: ["Padding", "Padding per side"],
				defaultValue: 15,
				valueKeys: [
					"paddingTop",
					"paddingRight",
					"paddingBottom",
					"paddingLeft",
				],
				valueLabels: ["T", "R", "B", "L"],
				min: 0,
			},
			borderRadius: {
				title: "Radius",
				type: ControlType2.Number,
				displayStepper: true,
				min: 0,
				defaultValue: 8,
			},
			focusObject: {
				type: ControlType2.Object,
				title: "Focus",
				optional: true,
				controls: {
					focusWidthFrom: {
						title: "From",
						type: ControlType2.Number,
						displayStepper: true,
						defaultValue: 0,
					},
					focusWidthTo: {
						title: "To",
						type: ControlType2.Number,
						displayStepper: true,
						defaultValue: 2,
					},
					focusColor: {
						title: "Color",
						type: ControlType2.Color,
						defaultValue: "#09F",
					},
				},
			},
			borderObject: {
				type: ControlType2.Object,
				title: "Border",
				optional: true,
				controls: {
					borderWidth: {
						title: "Width",
						type: ControlType2.Number,
						displayStepper: true,
						defaultValue: 1,
					},
					borderColor: {
						title: "Color",
						type: ControlType2.Color,
						defaultValue: "rgba(200,200,200,0.5)",
					},
				},
			},
			shadowObject: {
				type: ControlType2.Object,
				title: "Shadow",
				optional: true,
				controls: {
					shadowColor: {
						title: "Color",
						type: ControlType2.Color,
						defaultValue: "rgba(0,0,0,0.25)",
					},
					shadowX: {
						title: "Shadow X",
						type: ControlType2.Number,
						min: -100,
						max: 100,
						defaultValue: 0,
					},
					shadowY: {
						title: "Shadow Y",
						type: ControlType2.Number,
						min: -100,
						max: 100,
						defaultValue: 2,
					},
					shadowBlur: {
						title: "Shadow B",
						type: ControlType2.Number,
						min: 0,
						max: 100,
						defaultValue: 4,
					},
				},
			},
		},
	},
	button: {
		title: "Button",
		type: ControlType2.Object,
		controls: {
			shouldAppear: {
				title: "Show",
				type: ControlType2.Boolean,
				defaultValue: true,
			},
			label: {
				title: "Label",
				type: ControlType2.String,
				defaultValue: "Subscribe",
			},
			buttonFont: {
				type: ControlType2.Font,
				title: "Font",
				controls: "extended",
			},
			fill: {
				title: "Fill",
				type: ControlType2.Color,
				defaultValue: "#333",
			},
			color: {
				title: "Text",
				type: ControlType2.Color,
				defaultValue: "#FFF",
			},
			isDocked: {
				title: "Docked",
				type: ControlType2.Boolean,
				defaultValue: false,
			},
			widthWhenDocked: {
				title: "Width",
				type: ControlType2.Number,
				min: 0,
				defaultValue: 100,
				displayStepper: true,
				hidden: (props) => !props.isDocked,
			},
			insetWhenDocked: {
				title: "Inset",
				type: ControlType2.Number,
				min: 0,
				defaultValue: 5,
				displayStepper: true,
				hidden: (props) => !props.isDocked,
			},
			buttonPadding: {
				title: "Padding",
				type: ControlType2.FusedNumber,
				toggleKey: "buttonPaddingPerSide",
				toggleTitles: ["Padding", "Padding per side"],
				defaultValue: 15,
				valueKeys: [
					"buttonPaddingTop",
					"buttonPaddingRight",
					"buttonPaddingBottom",
					"buttonPaddingLeft",
				],
				valueLabels: ["T", "R", "B", "L"],
				min: 0,
			},
			buttonShadow: {
				type: ControlType2.Object,
				title: "Shadow",
				optional: true,
				controls: {
					shadowColor: {
						title: "Color",
						type: ControlType2.Color,
						defaultValue: "rgba(0,0,0,0.25)",
					},
					shadowX: {
						title: "Shadow X",
						type: ControlType2.Number,
						min: -100,
						max: 100,
						defaultValue: 0,
					},
					shadowY: {
						title: "Shadow Y",
						type: ControlType2.Number,
						min: -100,
						max: 100,
						defaultValue: 2,
					},
					shadowBlur: {
						title: "Shadow B",
						type: ControlType2.Number,
						min: 0,
						max: 100,
						defaultValue: 4,
					},
				},
			},
		},
	},
	gap: {
		title: "Gap",
		type: ControlType2.Number,
		displayStepper: true,
		min: 0,
		defaultValue: 10,
		hidden: (props) => props.button.isDocked,
	},
});

// /:https://framerusercontent.com/modules/nek8OyRQPw5MhPEYLhxW/DbrO59T5gsv1YNmNiIiC/PeLcf7ehs.js
import { fontStore } from "unframer";
fontStore.loadFonts([]);
var fonts2 = [
	{
		explicitInter: true,
		fonts: [],
	},
];
var css2 = [
	'.framer-7M6Cu .framer-styles-preset-1arsep9:not(.rich-text-wrapper), .framer-7M6Cu .framer-styles-preset-1arsep9.rich-text-wrapper a { --framer-link-current-text-decoration: none; --framer-link-hover-text-color: var(--token-55fce8bf-ab86-42dc-8b77-6335cf9cf588, #ffffff) /* {"name":"Primary Text"} */; --framer-link-hover-text-decoration: none; --framer-link-text-decoration: none; }',
];
var className2 = "framer-7M6Cu";

// /:https://framerusercontent.com/modules/vmB51tDfe8L2gbRvU0OM/ukbE2EJjMcDwTX2fB2Uy/Qjp1AZZMc.js
import { fontStore as fontStore2 } from "unframer";
fontStore2.loadFonts([
	"GF;Figtree-500",
	"GF;Figtree-700",
	"GF;Figtree-700italic",
	"GF;Figtree-500italic",
]);
var fonts3 = [
	{
		explicitInter: true,
		fonts: [
			{
				family: "Figtree",
				source: "google",
				style: "normal",
				url: "https://fonts.gstatic.com/s/figtree/v7/_Xmz-HUzqDCFdgfMsYiV_F7wfS-Bs_dNQF5bwkEU4HTy.woff2",
				weight: "500",
			},
			{
				family: "Figtree",
				source: "google",
				style: "normal",
				url: "https://fonts.gstatic.com/s/figtree/v7/_Xmz-HUzqDCFdgfMsYiV_F7wfS-Bs_eYR15bwkEU4HTy.woff2",
				weight: "700",
			},
			{
				family: "Figtree",
				source: "google",
				style: "italic",
				url: "https://fonts.gstatic.com/s/figtree/v7/_Xm9-HUzqDCFdgfMm4GnA4aZFrUvtOK3A1EayEA25WTybO8.woff2",
				weight: "700",
			},
			{
				family: "Figtree",
				source: "google",
				style: "italic",
				url: "https://fonts.gstatic.com/s/figtree/v7/_Xm9-HUzqDCFdgfMm4GnA4aZFrUvtOK3A4QdyEA25WTybO8.woff2",
				weight: "500",
			},
		],
	},
];
var css3 = [
	'.framer-U9bVq .framer-styles-preset-trq6qq:not(.rich-text-wrapper), .framer-U9bVq .framer-styles-preset-trq6qq.rich-text-wrapper p { --framer-font-family: "Figtree", "Figtree Placeholder", sans-serif; --framer-font-family-bold: "Figtree", "Figtree Placeholder", sans-serif; --framer-font-family-bold-italic: "Figtree", "Figtree Placeholder", sans-serif; --framer-font-family-italic: "Figtree", "Figtree Placeholder", sans-serif; --framer-font-open-type-features: normal; --framer-font-size: 18px; --framer-font-style: normal; --framer-font-style-bold: normal; --framer-font-style-bold-italic: italic; --framer-font-style-italic: italic; --framer-font-variation-axes: normal; --framer-font-weight: 500; --framer-font-weight-bold: 700; --framer-font-weight-bold-italic: 700; --framer-font-weight-italic: 500; --framer-letter-spacing: -0.02em; --framer-line-height: 1.5em; --framer-paragraph-spacing: 20px; --framer-text-alignment: center; --framer-text-color: var(--token-d072d1f5-ef86-4b7c-bae1-6c9f6238e10b, rgba(255, 255, 255, 0.75)); --framer-text-decoration: none; --framer-text-stroke-color: initial; --framer-text-stroke-width: initial; --framer-text-transform: none; }',
	'@media (max-width: 1199px) and (min-width: 810px) { .framer-U9bVq .framer-styles-preset-trq6qq:not(.rich-text-wrapper), .framer-U9bVq .framer-styles-preset-trq6qq.rich-text-wrapper p { --framer-font-family: "Figtree", "Figtree Placeholder", sans-serif; --framer-font-family-bold: "Figtree", "Figtree Placeholder", sans-serif; --framer-font-family-bold-italic: "Figtree", "Figtree Placeholder", sans-serif; --framer-font-family-italic: "Figtree", "Figtree Placeholder", sans-serif; --framer-font-open-type-features: normal; --framer-font-size: 16px; --framer-font-style: normal; --framer-font-style-bold: normal; --framer-font-style-bold-italic: italic; --framer-font-style-italic: italic; --framer-font-variation-axes: normal; --framer-font-weight: 500; --framer-font-weight-bold: 700; --framer-font-weight-bold-italic: 700; --framer-font-weight-italic: 500; --framer-letter-spacing: -0.02em; --framer-line-height: 1.5em; --framer-paragraph-spacing: 20px; --framer-text-alignment: center; --framer-text-color: var(--token-d072d1f5-ef86-4b7c-bae1-6c9f6238e10b, rgba(255, 255, 255, 0.75)); --framer-text-decoration: none; --framer-text-stroke-color: initial; --framer-text-stroke-width: initial; --framer-text-transform: none; } }',
	'@media (max-width: 809px) and (min-width: 0px) { .framer-U9bVq .framer-styles-preset-trq6qq:not(.rich-text-wrapper), .framer-U9bVq .framer-styles-preset-trq6qq.rich-text-wrapper p { --framer-font-family: "Figtree", "Figtree Placeholder", sans-serif; --framer-font-family-bold: "Figtree", "Figtree Placeholder", sans-serif; --framer-font-family-bold-italic: "Figtree", "Figtree Placeholder", sans-serif; --framer-font-family-italic: "Figtree", "Figtree Placeholder", sans-serif; --framer-font-open-type-features: normal; --framer-font-size: 16px; --framer-font-style: normal; --framer-font-style-bold: normal; --framer-font-style-bold-italic: italic; --framer-font-style-italic: italic; --framer-font-variation-axes: normal; --framer-font-weight: 500; --framer-font-weight-bold: 700; --framer-font-weight-bold-italic: 700; --framer-font-weight-italic: 500; --framer-letter-spacing: -0.02em; --framer-line-height: 1.5em; --framer-paragraph-spacing: 20px; --framer-text-alignment: center; --framer-text-color: var(--token-d072d1f5-ef86-4b7c-bae1-6c9f6238e10b, rgba(255, 255, 255, 0.75)); --framer-text-decoration: none; --framer-text-stroke-color: initial; --framer-text-stroke-width: initial; --framer-text-transform: none; } }',
];
var className3 = "framer-U9bVq";

// /:https://framer.com/m/Footer-duwg.js
var WaitlistFonts = getFonts(Waitlist);
var cycleOrder = ["ieOfW1kTV", "FfBnsZGMx"];
var serializationHash = "framer-YVdHC";
var variantClassNames = {
	FfBnsZGMx: "framer-v-vasdcq",
	ieOfW1kTV: "framer-v-gl77ky",
};
function addPropertyOverrides(overrides, ...variants) {
	const nextOverrides = {};
	variants?.forEach(
		(variant) => variant && Object.assign(nextOverrides, overrides[variant]),
	);
	return nextOverrides;
}
var transition1 = {
	bounce: 0.2,
	delay: 0,
	duration: 0.4,
	type: "spring",
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition = value ?? config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion2.create(React.Fragment);
var humanReadableVariantMap = {
	Footer: "ieOfW1kTV",
	Mobile: "FfBnsZGMx",
};
var getProps = ({ height, id, width, ...props }) => {
	return {
		...props,
		variant:
			humanReadableVariantMap[props.variant] ?? props.variant ?? "ieOfW1kTV",
	};
};
var createLayoutDependency = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const fallbackRef = useRef(null);
	const refBinding = ref ?? fallbackRef;
	const defaultLayoutId = React.useId();
	const { activeLocale, setLocale } = useLocaleInfo();
	const componentViewport = useComponentViewport();
	const {
		style,
		className: className4,
		layoutId,
		variant,
		...restProps
	} = getProps(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		cycleOrder,
		defaultVariant: "ieOfW1kTV",
		ref: refBinding,
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const sharedStyleClassNames = [className, className3, className2];
	const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
	return (
		<LayoutGroup id={layoutId ?? defaultLayoutId}>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<motion2.footer
						{...restProps}
						{...gestureHandlers}
						className={cx(
							scopingClassNames,
							"framer-gl77ky",
							className4,
							classNames,
						)}
						data-border={true}
						data-framer-name={"Footer"}
						layoutDependency={layoutDependency}
						layoutId={"ieOfW1kTV"}
						ref={refBinding}
						style={{
							"--border-bottom-width": "0px",
							"--border-color":
								"var(--token-313dd4d6-9859-4bdd-889b-954a849d13e3, rgb(34, 34, 34))",
							"--border-left-width": "0px",
							"--border-right-width": "0px",
							"--border-style": "solid",
							"--border-top-width": "2px",
							background:
								"radial-gradient(50% 50% at 50% 3.4000000000000004%, rgba(129, 74, 200, 0.3) 0%, rgba(171, 171, 171, 0) 100%)",
							...style,
						}}
						{...addPropertyOverrides(
							{
								FfBnsZGMx: {
									"data-framer-name": "Mobile",
								},
							},
							baseVariant,
							gestureVariant,
						)}
					>
						<motion2.div
							className={"framer-1e86zuq"}
							data-framer-name={"Container"}
							layoutDependency={layoutDependency}
							layoutId={"LMuTV7SRb"}
						>
							<motion2.div
								className={"framer-1r6sw1n"}
								data-framer-name={"Left section"}
								layoutDependency={layoutDependency}
								layoutId={"ukqiemW9i"}
							>
								<motion2.div
									className={"framer-p2tc5g"}
									data-framer-name={"Logo+tagline"}
									layoutDependency={layoutDependency}
									layoutId={"BFcKXIXEv"}
								>
									<Link
										href={{
											webPageId: "augiA20Il",
										}}
										motionChild={true}
										nodeId={"EU2x9MmEd"}
										openInNewTab={false}
										scopeId={"nr4UGyIqQ"}
										smoothScroll={true}
									>
										<motion2.a
											className={"framer-15vbno8 framer-1kw8x0x"}
											data-framer-name={"Logo"}
											layoutDependency={layoutDependency}
											layoutId={"EU2x9MmEd"}
										>
											<SVG
												className={"framer-1wk2c50"}
												data-framer-name={"Graphic"}
												fill={"black"}
												intrinsicHeight={512}
												intrinsicWidth={512}
												layoutDependency={layoutDependency}
												layoutId={"cT3raFrE5"}
												svg={
													'<svg xmlns="http://www.w3.org/2000/svg" width="512" height="512" viewBox="0 0 24 24" style="enable-background:new 0 0 512 512" xml:space="preserve"><g fill="#fff"><path d="M2 18c0-1.886 0-2.828.586-3.414C3.172 14 4.114 14 6 14s2.828 0 3.414.586C10 15.172 10 16.114 10 18s0 2.828-.586 3.414C8.828 22 7.886 22 6 22s-2.828 0-3.414-.586C2 20.828 2 19.886 2 18z" data-original="#000000"/><path fill-rule="evenodd" d="M3.464 3.464C2 4.93 2 7.286 2 12v1.138c.509-.333 1.069-.48 1.606-.551.645-.087 1.439-.087 2.305-.087h.179c.865 0 1.659 0 2.304.087.711.095 1.463.32 2.08.938.619.618.844 1.37.94 2.08.086.646.086 1.44.086 2.305v.18c0 .865 0 1.659-.087 2.304-.072.537-.218 1.097-.55 1.605L12 22c4.714 0 7.071 0 8.536-1.464C22 19.07 22 16.713 22 12c0-4.714 0-7.071-1.464-8.536C19.07 2 16.713 2 12 2 7.286 2 4.929 2 3.464 3.464zM15.75 12.75a.75.75 0 0 0 0-1.5h-1.94l3.72-3.72a.75.75 0 0 0-1.06-1.06l-3.72 3.72V8.25a.75.75 0 0 0-1.5 0V12c0 .414.336.75.75.75z" clip-rule="evenodd" data-original="#000000"/></g></svg>'
												}
												withExternalLayout={true}
											/>
											<RichText
												__fromCanvasComponent={true}
												className={"framer-an5rp5"}
												fonts={["GF;Figtree-700"]}
												layoutDependency={layoutDependency}
												layoutId={"jEDfWRvdD"}
												style={{
													"--extracted-r6o4lv": "rgb(255, 255, 255)",
													"--framer-link-text-color": "rgb(0, 153, 255)",
													"--framer-link-text-decoration": "underline",
												}}
												verticalAlignment={"top"}
												withExternalLayout={true}
												{...addPropertyOverrides(
													{
														FfBnsZGMx: {
															children: (
																<React.Fragment>
																	<motion2.p
																		style={{
																			"--font-selector": "R0Y7RmlndHJlZS03MDA=",
																			"--framer-font-family":
																				'"Figtree", "Figtree Placeholder", sans-serif',
																			"--framer-font-size": "26px",
																			"--framer-font-weight": "700",
																			"--framer-letter-spacing": "-0.06em",
																			"--framer-text-alignment": "center",
																			"--framer-text-color":
																				"var(--extracted-r6o4lv, rgb(255, 255, 255))",
																		}}
																	>
																		{"XTRACT"}
																	</motion2.p>
																</React.Fragment>
															),
														},
													},
													baseVariant,
													gestureVariant,
												)}
											>
												<React.Fragment>
													<motion2.p
														style={{
															"--font-selector": "R0Y7RmlndHJlZS03MDA=",
															"--framer-font-family":
																'"Figtree", "Figtree Placeholder", sans-serif',
															"--framer-font-size": "30px",
															"--framer-font-weight": "700",
															"--framer-letter-spacing": "-0.06em",
															"--framer-text-alignment": "center",
															"--framer-text-color":
																"var(--extracted-r6o4lv, rgb(255, 255, 255))",
														}}
													>
														{"XTRACT"}
													</motion2.p>
												</React.Fragment>
											</RichText>
										</motion2.a>
									</Link>
									<RichText
										__fromCanvasComponent={true}
										className={"framer-1ttt0qu"}
										fonts={["Inter"]}
										layoutDependency={layoutDependency}
										layoutId={"Zg33jDUps"}
										style={{
											"--framer-link-text-color": "rgb(0, 153, 255)",
											"--framer-link-text-decoration": "underline",
										}}
										verticalAlignment={"top"}
										withExternalLayout={true}
									>
										<React.Fragment>
											<motion2.p
												className={"framer-styles-preset-16w1u5n"}
												data-styles-preset={"csUbUKGQ_"}
											>
												{
													"Xtract \u2013 Automate Smarter, Optimize Faster, and Grow Stronger."
												}
											</motion2.p>
										</React.Fragment>
									</RichText>
								</motion2.div>
								<motion2.div
									className={"framer-ilh2kr"}
									data-framer-name={"newsletter"}
									layoutDependency={layoutDependency}
									layoutId={"Ux0Hkux6J"}
								>
									<RichText
										__fromCanvasComponent={true}
										className={"framer-1kqxpfa"}
										fonts={["Inter"]}
										layoutDependency={layoutDependency}
										layoutId={"womFxLOWL"}
										style={{
											"--extracted-r6o4lv":
												"var(--token-55fce8bf-ab86-42dc-8b77-6335cf9cf588, rgb(255, 255, 255))",
											"--framer-link-text-color": "rgb(0, 153, 255)",
											"--framer-link-text-decoration": "underline",
										}}
										verticalAlignment={"top"}
										withExternalLayout={true}
									>
										<React.Fragment>
											<motion2.p
												className={"framer-styles-preset-trq6qq"}
												data-styles-preset={"Qjp1AZZMc"}
												style={{
													"--framer-text-color":
														"var(--extracted-r6o4lv, var(--token-55fce8bf-ab86-42dc-8b77-6335cf9cf588, rgb(255, 255, 255)))",
												}}
											>
												{"Join our newsletter"}
											</motion2.p>
										</React.Fragment>
									</RichText>
									<ComponentViewportProvider>
										<SmartComponentScopedContainer
											className={"framer-1dshp1e-container"}
											isAuthoredByUser={true}
											isModuleExternal={true}
											layoutDependency={layoutDependency}
											layoutId={"gtVIC4F5y-container"}
											nodeId={"gtVIC4F5y"}
											rendersWithMotion={true}
											scopeId={"nr4UGyIqQ"}
										>
											<Waitlist
												button={{
													buttonFont: {
														fontFamily:
															'"Figtree", "Figtree Placeholder", sans-serif',
														fontSize: "16px",
														fontStyle: "normal",
														fontWeight: 500,
														letterSpacing: "0em",
														lineHeight: "1em",
													},
													buttonPadding: 15,
													buttonPaddingBottom: 10,
													buttonPaddingLeft: 15,
													buttonPaddingPerSide: true,
													buttonPaddingRight: 15,
													buttonPaddingTop: 10,
													color:
														"var(--token-ea3f5ec2-80ec-412c-a26e-34872584c90c, rgb(255, 255, 255))",
													fill: "var(--token-a888adc2-3d05-4d6f-88b7-8dab97418795, rgb(129, 74, 200))",
													insetWhenDocked: 5,
													isDocked: true,
													label: "Subscribe",
													shouldAppear: true,
													widthWhenDocked: 100,
												}}
												font={{
													fontFamily:
														'"Figtree", "Figtree Placeholder", sans-serif',
													fontSize: "16px",
													fontStyle: "normal",
													fontWeight: 500,
													letterSpacing: "0em",
													lineHeight: "1em",
												}}
												gap={10}
												getwaitlistAPI={""}
												height={"100%"}
												id={"gtVIC4F5y"}
												input={{
													borderObject: {
														borderColor:
															"var(--token-313dd4d6-9859-4bdd-889b-954a849d13e3, rgb(34, 34, 34))",
														borderWidth: 1,
													},
													borderRadius: 8,
													color:
														"var(--token-55fce8bf-ab86-42dc-8b77-6335cf9cf588, rgb(255, 255, 255))",
													fill: "var(--token-b2fb23d9-6070-4f2d-b3d0-2fe68c4f2aab, rgba(13, 13, 13, 0.8))",
													fixedHeight: 50,
													height: true,
													padding: 15,
													paddingBottom: 15,
													paddingLeft: 15,
													paddingPerSide: false,
													paddingRight: 15,
													paddingTop: 15,
													placeholder: "name@email.com",
													placeholderColor:
														"var(--token-d072d1f5-ef86-4b7c-bae1-6c9f6238e10b, rgba(255, 255, 255, 0.75))",
												}}
												layout={"horizontal"}
												layoutId={"gtVIC4F5y"}
												redirectAs={"link"}
												style={{
													maxWidth: "100%",
													width: "100%",
												}}
												width={"100%"}
											/>
										</SmartComponentScopedContainer>
									</ComponentViewportProvider>
								</motion2.div>
							</motion2.div>
							<motion2.div
								className={"framer-15o4tju"}
								data-framer-name={"Right section"}
								layoutDependency={layoutDependency}
								layoutId={"t5C2HRPds"}
							>
								<motion2.div
									className={"framer-1xuayvw"}
									data-framer-name={"Links"}
									layoutDependency={layoutDependency}
									layoutId={"udLRNMw7J"}
								>
									<RichText
										__fromCanvasComponent={true}
										className={"framer-1xj2ids"}
										fonts={["GF;Figtree-500"]}
										layoutDependency={layoutDependency}
										layoutId={"srVEkFr6z"}
										style={{
											"--extracted-r6o4lv":
												"var(--token-ea3f5ec2-80ec-412c-a26e-34872584c90c, rgb(255, 255, 255))",
											"--framer-link-text-color": "rgb(0, 153, 255)",
											"--framer-link-text-decoration": "underline",
										}}
										verticalAlignment={"top"}
										withExternalLayout={true}
									>
										<React.Fragment>
											<motion2.p
												style={{
													"--font-selector": "R0Y7RmlndHJlZS01MDA=",
													"--framer-font-family":
														'"Figtree", "Figtree Placeholder", sans-serif',
													"--framer-font-size": "18px",
													"--framer-font-weight": "500",
													"--framer-letter-spacing": "-0.02em",
													"--framer-line-height": "1.5em",
													"--framer-text-alignment": "left",
													"--framer-text-color":
														"var(--extracted-r6o4lv, var(--token-ea3f5ec2-80ec-412c-a26e-34872584c90c, rgb(255, 255, 255)))",
												}}
											>
												{"Links"}
											</motion2.p>
										</React.Fragment>
									</RichText>
									<RichText
										__fromCanvasComponent={true}
										className={"framer-nnxr25"}
										fonts={["Inter"]}
										layoutDependency={layoutDependency}
										layoutId={"zdcy2qRl8"}
										verticalAlignment={"top"}
										withExternalLayout={true}
									>
										<React.Fragment>
											<motion2.p
												className={"framer-styles-preset-16w1u5n"}
												data-styles-preset={"csUbUKGQ_"}
											>
												<Link
													href={{
														hash: ":shuBCQJ3E",
														webPageId: "augiA20Il",
													}}
													motionChild={true}
													nodeId={"zdcy2qRl8"}
													openInNewTab={false}
													relValues={[]}
													scopeId={"nr4UGyIqQ"}
													smoothScroll={true}
												>
													<motion2.a
														className={"framer-styles-preset-1arsep9"}
														data-styles-preset={"PeLcf7ehs"}
													>
														{"Services"}
													</motion2.a>
												</Link>
											</motion2.p>
										</React.Fragment>
									</RichText>
									<RichText
										__fromCanvasComponent={true}
										className={"framer-33pgkc"}
										fonts={["Inter"]}
										layoutDependency={layoutDependency}
										layoutId={"JGF9ifYe6"}
										verticalAlignment={"top"}
										withExternalLayout={true}
									>
										<React.Fragment>
											<motion2.p
												className={"framer-styles-preset-16w1u5n"}
												data-styles-preset={"csUbUKGQ_"}
											>
												<Link
													href={{
														hash: ":WupIYJn0v",
														webPageId: "augiA20Il",
													}}
													motionChild={true}
													nodeId={"JGF9ifYe6"}
													openInNewTab={false}
													relValues={[]}
													scopeId={"nr4UGyIqQ"}
													smoothScroll={true}
												>
													<motion2.a
														className={"framer-styles-preset-1arsep9"}
														data-styles-preset={"PeLcf7ehs"}
													>
														{"Process"}
													</motion2.a>
												</Link>
											</motion2.p>
										</React.Fragment>
									</RichText>
									<RichText
										__fromCanvasComponent={true}
										className={"framer-11zpzo9"}
										fonts={["Inter"]}
										layoutDependency={layoutDependency}
										layoutId={"Vb0BQ12Af"}
										verticalAlignment={"top"}
										withExternalLayout={true}
									>
										<React.Fragment>
											<motion2.p
												className={"framer-styles-preset-16w1u5n"}
												data-styles-preset={"csUbUKGQ_"}
											>
												<Link
													href={{
														hash: ":VbpvSESbT",
														webPageId: "augiA20Il",
													}}
													motionChild={true}
													nodeId={"Vb0BQ12Af"}
													openInNewTab={false}
													relValues={[]}
													scopeId={"nr4UGyIqQ"}
													smoothScroll={true}
												>
													<motion2.a
														className={"framer-styles-preset-1arsep9"}
														data-styles-preset={"PeLcf7ehs"}
													>
														{"Case studies"}
													</motion2.a>
												</Link>
											</motion2.p>
										</React.Fragment>
									</RichText>
									<RichText
										__fromCanvasComponent={true}
										className={"framer-1l6z926"}
										fonts={["Inter"]}
										layoutDependency={layoutDependency}
										layoutId={"nstiyD0QN"}
										verticalAlignment={"top"}
										withExternalLayout={true}
									>
										<React.Fragment>
											<motion2.p
												className={"framer-styles-preset-16w1u5n"}
												data-styles-preset={"csUbUKGQ_"}
											>
												<Link
													href={{
														hash: ":tLZ8fl8WB",
														webPageId: "augiA20Il",
													}}
													motionChild={true}
													nodeId={"nstiyD0QN"}
													openInNewTab={false}
													relValues={[]}
													scopeId={"nr4UGyIqQ"}
													smoothScroll={true}
												>
													<motion2.a
														className={"framer-styles-preset-1arsep9"}
														data-styles-preset={"PeLcf7ehs"}
													>
														{"Benefits"}
													</motion2.a>
												</Link>
											</motion2.p>
										</React.Fragment>
									</RichText>
									<RichText
										__fromCanvasComponent={true}
										className={"framer-1n5di6i"}
										fonts={["Inter"]}
										layoutDependency={layoutDependency}
										layoutId={"MH5mq49Gy"}
										verticalAlignment={"top"}
										withExternalLayout={true}
									>
										<React.Fragment>
											<motion2.p
												className={"framer-styles-preset-16w1u5n"}
												data-styles-preset={"csUbUKGQ_"}
											>
												<Link
													href={{
														hash: ":qizyG_qil",
														webPageId: "augiA20Il",
													}}
													motionChild={true}
													nodeId={"MH5mq49Gy"}
													openInNewTab={false}
													relValues={[]}
													scopeId={"nr4UGyIqQ"}
													smoothScroll={true}
												>
													<motion2.a
														className={"framer-styles-preset-1arsep9"}
														data-styles-preset={"PeLcf7ehs"}
													>
														{"Pricing"}
													</motion2.a>
												</Link>
											</motion2.p>
										</React.Fragment>
									</RichText>
								</motion2.div>
								<motion2.div
									className={"framer-1059hdh"}
									data-framer-name={"Pages"}
									layoutDependency={layoutDependency}
									layoutId={"Q6zPKk02P"}
								>
									<RichText
										__fromCanvasComponent={true}
										className={"framer-kz9l5l"}
										fonts={["GF;Figtree-500"]}
										layoutDependency={layoutDependency}
										layoutId={"GqQIB0Crk"}
										style={{
											"--extracted-r6o4lv":
												"var(--token-ea3f5ec2-80ec-412c-a26e-34872584c90c, rgb(255, 255, 255))",
											"--framer-link-text-color": "rgb(0, 153, 255)",
											"--framer-link-text-decoration": "underline",
										}}
										verticalAlignment={"top"}
										withExternalLayout={true}
									>
										<React.Fragment>
											<motion2.p
												style={{
													"--font-selector": "R0Y7RmlndHJlZS01MDA=",
													"--framer-font-family":
														'"Figtree", "Figtree Placeholder", sans-serif',
													"--framer-font-size": "18px",
													"--framer-font-weight": "500",
													"--framer-letter-spacing": "-0.02em",
													"--framer-line-height": "1.5em",
													"--framer-text-alignment": "left",
													"--framer-text-color":
														"var(--extracted-r6o4lv, var(--token-ea3f5ec2-80ec-412c-a26e-34872584c90c, rgb(255, 255, 255)))",
												}}
											>
												{"Pages"}
											</motion2.p>
										</React.Fragment>
									</RichText>
									<RichText
										__fromCanvasComponent={true}
										className={"framer-15yp97z"}
										fonts={["Inter"]}
										layoutDependency={layoutDependency}
										layoutId={"y_1tXHJGA"}
										verticalAlignment={"top"}
										withExternalLayout={true}
									>
										<React.Fragment>
											<motion2.p
												className={"framer-styles-preset-16w1u5n"}
												data-styles-preset={"csUbUKGQ_"}
											>
												<Link
													href={{
														webPageId: "augiA20Il",
													}}
													motionChild={true}
													nodeId={"y_1tXHJGA"}
													openInNewTab={false}
													relValues={[]}
													scopeId={"nr4UGyIqQ"}
													smoothScroll={false}
												>
													<motion2.a
														className={"framer-styles-preset-1arsep9"}
														data-styles-preset={"PeLcf7ehs"}
													>
														{"Home"}
													</motion2.a>
												</Link>
											</motion2.p>
										</React.Fragment>
									</RichText>
									<RichText
										__fromCanvasComponent={true}
										className={"framer-1u296t6"}
										fonts={["Inter"]}
										layoutDependency={layoutDependency}
										layoutId={"a0WExrobx"}
										verticalAlignment={"top"}
										withExternalLayout={true}
									>
										<React.Fragment>
											<motion2.p
												className={"framer-styles-preset-16w1u5n"}
												data-styles-preset={"csUbUKGQ_"}
											>
												<Link
													href={{
														webPageId: "PnYnZFkf8",
													}}
													motionChild={true}
													nodeId={"a0WExrobx"}
													openInNewTab={false}
													relValues={[]}
													scopeId={"nr4UGyIqQ"}
													smoothScroll={false}
												>
													<motion2.a
														className={"framer-styles-preset-1arsep9"}
														data-styles-preset={"PeLcf7ehs"}
													>
														{"About"}
													</motion2.a>
												</Link>
											</motion2.p>
										</React.Fragment>
									</RichText>
									<RichText
										__fromCanvasComponent={true}
										className={"framer-1yo41ih"}
										fonts={["Inter"]}
										layoutDependency={layoutDependency}
										layoutId={"G5cDExX7o"}
										verticalAlignment={"top"}
										withExternalLayout={true}
									>
										<React.Fragment>
											<motion2.p
												className={"framer-styles-preset-16w1u5n"}
												data-styles-preset={"csUbUKGQ_"}
											>
												<Link
													href={{
														webPageId: "BrHvGwiT3",
													}}
													motionChild={true}
													nodeId={"G5cDExX7o"}
													openInNewTab={false}
													relValues={[]}
													scopeId={"nr4UGyIqQ"}
													smoothScroll={false}
												>
													<motion2.a
														className={"framer-styles-preset-1arsep9"}
														data-styles-preset={"PeLcf7ehs"}
													>
														{"Blog"}
													</motion2.a>
												</Link>
											</motion2.p>
										</React.Fragment>
									</RichText>
									<RichText
										__fromCanvasComponent={true}
										className={"framer-17fbw8y"}
										fonts={["Inter"]}
										layoutDependency={layoutDependency}
										layoutId={"XawUZ0TFN"}
										verticalAlignment={"top"}
										withExternalLayout={true}
									>
										<React.Fragment>
											<motion2.p
												className={"framer-styles-preset-16w1u5n"}
												data-styles-preset={"csUbUKGQ_"}
											>
												<Link
													href={{
														webPageId: "atppc3P5_",
													}}
													motionChild={true}
													nodeId={"XawUZ0TFN"}
													openInNewTab={false}
													relValues={[]}
													scopeId={"nr4UGyIqQ"}
													smoothScroll={false}
												>
													<motion2.a
														className={"framer-styles-preset-1arsep9"}
														data-styles-preset={"PeLcf7ehs"}
													>
														{"Contact"}
													</motion2.a>
												</Link>
											</motion2.p>
										</React.Fragment>
									</RichText>
									<RichText
										__fromCanvasComponent={true}
										className={"framer-s16ddf"}
										fonts={["Inter"]}
										layoutDependency={layoutDependency}
										layoutId={"FNmapEOkB"}
										verticalAlignment={"top"}
										withExternalLayout={true}
									>
										<React.Fragment>
											<motion2.p
												className={"framer-styles-preset-16w1u5n"}
												data-styles-preset={"csUbUKGQ_"}
											>
												<Link
													href={{
														webPageId: "h8fraBXAH",
													}}
													motionChild={true}
													nodeId={"FNmapEOkB"}
													openInNewTab={false}
													relValues={[]}
													scopeId={"nr4UGyIqQ"}
													smoothScroll={false}
												>
													<motion2.a
														className={"framer-styles-preset-1arsep9"}
														data-styles-preset={"PeLcf7ehs"}
													>
														{"404"}
													</motion2.a>
												</Link>
											</motion2.p>
										</React.Fragment>
									</RichText>
								</motion2.div>
								<motion2.div
									className={"framer-lelgua"}
									data-framer-name={"Socials"}
									layoutDependency={layoutDependency}
									layoutId={"gW50gsdkK"}
								>
									<RichText
										__fromCanvasComponent={true}
										className={"framer-1a3xytj"}
										fonts={["GF;Figtree-500"]}
										layoutDependency={layoutDependency}
										layoutId={"YgaLlmSXy"}
										style={{
											"--extracted-r6o4lv":
												"var(--token-ea3f5ec2-80ec-412c-a26e-34872584c90c, rgb(255, 255, 255))",
											"--framer-link-text-color": "rgb(0, 153, 255)",
											"--framer-link-text-decoration": "underline",
										}}
										verticalAlignment={"top"}
										withExternalLayout={true}
									>
										<React.Fragment>
											<motion2.p
												style={{
													"--font-selector": "R0Y7RmlndHJlZS01MDA=",
													"--framer-font-family":
														'"Figtree", "Figtree Placeholder", sans-serif',
													"--framer-font-size": "18px",
													"--framer-font-weight": "500",
													"--framer-letter-spacing": "-0.02em",
													"--framer-line-height": "1.5em",
													"--framer-text-alignment": "left",
													"--framer-text-color":
														"var(--extracted-r6o4lv, var(--token-ea3f5ec2-80ec-412c-a26e-34872584c90c, rgb(255, 255, 255)))",
												}}
											>
												{"Socials"}
											</motion2.p>
										</React.Fragment>
									</RichText>
									<RichText
										__fromCanvasComponent={true}
										className={"framer-128kjvl"}
										fonts={["Inter"]}
										layoutDependency={layoutDependency}
										layoutId={"vViOT5enA"}
										verticalAlignment={"top"}
										withExternalLayout={true}
									>
										<React.Fragment>
											<motion2.p
												className={"framer-styles-preset-16w1u5n"}
												data-styles-preset={"csUbUKGQ_"}
											>
												<Link
													href={"instagram.com"}
													motionChild={true}
													nodeId={"vViOT5enA"}
													openInNewTab={true}
													relValues={[]}
													scopeId={"nr4UGyIqQ"}
													smoothScroll={false}
												>
													<motion2.a
														className={"framer-styles-preset-1arsep9"}
														data-styles-preset={"PeLcf7ehs"}
													>
														{"Instagram"}
													</motion2.a>
												</Link>
											</motion2.p>
										</React.Fragment>
									</RichText>
									<RichText
										__fromCanvasComponent={true}
										className={"framer-17xvz2h"}
										fonts={["Inter"]}
										layoutDependency={layoutDependency}
										layoutId={"xMu_lqB8L"}
										verticalAlignment={"top"}
										withExternalLayout={true}
									>
										<React.Fragment>
											<motion2.p
												className={"framer-styles-preset-16w1u5n"}
												data-styles-preset={"csUbUKGQ_"}
											>
												<Link
													href={"facebook.com"}
													motionChild={true}
													nodeId={"xMu_lqB8L"}
													openInNewTab={true}
													relValues={[]}
													scopeId={"nr4UGyIqQ"}
													smoothScroll={false}
												>
													<motion2.a
														className={"framer-styles-preset-1arsep9"}
														data-styles-preset={"PeLcf7ehs"}
													>
														{"Facebook"}
													</motion2.a>
												</Link>
											</motion2.p>
										</React.Fragment>
									</RichText>
									<RichText
										__fromCanvasComponent={true}
										className={"framer-bqzn9f"}
										fonts={["Inter"]}
										layoutDependency={layoutDependency}
										layoutId={"CmGggdc9x"}
										verticalAlignment={"top"}
										withExternalLayout={true}
									>
										<React.Fragment>
											<motion2.p
												className={"framer-styles-preset-16w1u5n"}
												data-styles-preset={"csUbUKGQ_"}
											>
												<Link
													href={"linkedin.com"}
													motionChild={true}
													nodeId={"CmGggdc9x"}
													openInNewTab={true}
													relValues={[]}
													scopeId={"nr4UGyIqQ"}
													smoothScroll={false}
												>
													<motion2.a
														className={"framer-styles-preset-1arsep9"}
														data-styles-preset={"PeLcf7ehs"}
													>
														{"Linkedin"}
													</motion2.a>
												</Link>
											</motion2.p>
										</React.Fragment>
									</RichText>
									<RichText
										__fromCanvasComponent={true}
										className={"framer-yjr7zv"}
										fonts={["Inter"]}
										layoutDependency={layoutDependency}
										layoutId={"Pr_e800vb"}
										verticalAlignment={"top"}
										withExternalLayout={true}
									>
										<React.Fragment>
											<motion2.p
												className={"framer-styles-preset-16w1u5n"}
												data-styles-preset={"csUbUKGQ_"}
											>
												<Link
													href={"x.com"}
													motionChild={true}
													nodeId={"Pr_e800vb"}
													openInNewTab={true}
													relValues={[]}
													scopeId={"nr4UGyIqQ"}
													smoothScroll={false}
												>
													<motion2.a
														className={"framer-styles-preset-1arsep9"}
														data-styles-preset={"PeLcf7ehs"}
													>
														{"Twitter"}
													</motion2.a>
												</Link>
											</motion2.p>
										</React.Fragment>
									</RichText>
								</motion2.div>
							</motion2.div>
						</motion2.div>
					</motion2.footer>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css4 = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-YVdHC.framer-1kw8x0x, .framer-YVdHC .framer-1kw8x0x { display: block; }",
	".framer-YVdHC.framer-gl77ky { align-content: center; align-items: center; display: flex; flex-direction: column; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: center; overflow: visible; padding: 64px 40px 64px 40px; position: relative; width: 1200px; }",
	".framer-YVdHC .framer-1e86zuq { align-content: flex-start; align-items: flex-start; display: flex; flex: none; flex-direction: row; flex-wrap: nowrap; gap: 20px; height: min-content; justify-content: center; max-width: 1200px; overflow: hidden; padding: 0px; position: relative; width: 100%; }",
	".framer-YVdHC .framer-1r6sw1n { align-content: flex-start; align-items: flex-start; display: flex; flex: 1 0 0px; flex-direction: column; flex-wrap: nowrap; gap: 15px; height: min-content; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: 1px; }",
	".framer-YVdHC .framer-p2tc5g { align-content: flex-start; align-items: flex-start; display: flex; flex: none; flex-direction: column; flex-wrap: nowrap; gap: 20px; height: min-content; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: 100%; }",
	".framer-YVdHC .framer-15vbno8 { align-content: center; align-items: center; display: flex; flex: none; flex-direction: row; flex-wrap: nowrap; gap: 4px; height: min-content; justify-content: flex-start; overflow: visible; padding: 0px; position: relative; text-decoration: none; width: min-content; }",
	".framer-YVdHC .framer-1wk2c50 { aspect-ratio: 1 / 1; flex: none; height: var(--framer-aspect-ratio-supported, 40px); position: relative; width: 40px; }",
	".framer-YVdHC .framer-an5rp5, .framer-YVdHC .framer-1xj2ids, .framer-YVdHC .framer-nnxr25, .framer-YVdHC .framer-33pgkc, .framer-YVdHC .framer-11zpzo9, .framer-YVdHC .framer-1l6z926, .framer-YVdHC .framer-1n5di6i, .framer-YVdHC .framer-kz9l5l, .framer-YVdHC .framer-15yp97z, .framer-YVdHC .framer-1u296t6, .framer-YVdHC .framer-1yo41ih, .framer-YVdHC .framer-17fbw8y, .framer-YVdHC .framer-s16ddf, .framer-YVdHC .framer-1a3xytj, .framer-YVdHC .framer-128kjvl, .framer-YVdHC .framer-17xvz2h, .framer-YVdHC .framer-bqzn9f, .framer-YVdHC .framer-yjr7zv { flex: none; height: auto; position: relative; white-space: pre; width: auto; }",
	".framer-YVdHC .framer-1ttt0qu, .framer-YVdHC .framer-1kqxpfa { flex: none; height: auto; max-width: 300px; position: relative; white-space: pre-wrap; width: auto; word-break: break-word; word-wrap: break-word; }",
	".framer-YVdHC .framer-ilh2kr { align-content: flex-start; align-items: flex-start; display: flex; flex: none; flex-direction: column; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: 100%; }",
	".framer-YVdHC .framer-1dshp1e-container { flex: none; height: auto; max-width: 320px; position: relative; width: 100%; }",
	".framer-YVdHC .framer-15o4tju { align-content: flex-start; align-items: flex-start; display: flex; flex: 1 0 0px; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: 1px; }",
	".framer-YVdHC .framer-1xuayvw, .framer-YVdHC .framer-1059hdh, .framer-YVdHC .framer-lelgua { align-content: flex-start; align-items: flex-start; display: flex; flex: 1 0 0px; flex-direction: column; flex-wrap: nowrap; gap: 7px; height: min-content; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: 1px; }",
	".framer-YVdHC.framer-v-vasdcq.framer-gl77ky { padding: 40px 24px 35px 24px; width: 390px; }",
	".framer-YVdHC.framer-v-vasdcq .framer-1e86zuq { flex-direction: column; gap: 25px; }",
	".framer-YVdHC.framer-v-vasdcq .framer-1r6sw1n { flex: none; gap: 20px; width: 100%; }",
	".framer-YVdHC.framer-v-vasdcq .framer-1wk2c50 { height: var(--framer-aspect-ratio-supported, 30px); width: 30px; }",
	".framer-YVdHC.framer-v-vasdcq .framer-15o4tju { align-content: unset; align-items: unset; display: grid; flex: none; gap: 20px; grid-auto-rows: min-content; grid-template-columns: repeat(2, minmax(50px, 1fr)); grid-template-rows: repeat(2, min-content); width: 100%; }",
	".framer-YVdHC.framer-v-vasdcq .framer-1xuayvw, .framer-YVdHC.framer-v-vasdcq .framer-1059hdh, .framer-YVdHC.framer-v-vasdcq .framer-lelgua { align-self: start; flex: none; justify-self: start; width: 100%; }",
	".framer-YVdHC.framer-v-vasdcq .framer-11zpzo9 { white-space: pre-wrap; width: 100%; word-break: break-word; word-wrap: break-word; }",
	...css,
	...css3,
	...css2,
	'.framer-YVdHC[data-border="true"]::after, .framer-YVdHC [data-border="true"]::after { content: ""; border-width: var(--border-top-width, 0) var(--border-right-width, 0) var(--border-bottom-width, 0) var(--border-left-width, 0); border-color: var(--border-color, none); border-style: var(--border-style, none); width: 100%; height: 100%; position: absolute; box-sizing: border-box; left: 0; top: 0; border-radius: inherit; pointer-events: none; }',
];
var Framernr4UGyIqQ = withCSS2(Component, css4, "framer-YVdHC");
var stdin_default2 = Framernr4UGyIqQ;
Framernr4UGyIqQ.displayName = "Footer";
Framernr4UGyIqQ.defaultProps = {
	height: 334,
	width: 1200,
};
addPropertyControls3(Framernr4UGyIqQ, {
	variant: {
		options: ["ieOfW1kTV", "FfBnsZGMx"],
		optionTitles: ["Footer", "Mobile"],
		title: "Variant",
		type: ControlType3.Enum,
	},
});
addFonts(
	Framernr4UGyIqQ,
	[
		{
			explicitInter: true,
			fonts: [
				{
					family: "Figtree",
					source: "google",
					style: "normal",
					url: "https://fonts.gstatic.com/s/figtree/v8/_Xmz-HUzqDCFdgfMsYiV_F7wfS-Bs_eYR15bwkEU4HTy.woff2",
					weight: "700",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F",
					url: "https://framerusercontent.com/assets/5vvr9Vy74if2I6bQbJvbw7SY1pQ.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116",
					url: "https://framerusercontent.com/assets/EOr0mi4hNtlgWNn9if640EZzXCo.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+1F00-1FFF",
					url: "https://framerusercontent.com/assets/Y9k9QrlZAqio88Klkmbd8VoMQc.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+0370-03FF",
					url: "https://framerusercontent.com/assets/OYrD2tBIBPvoJXiIHnLoOXnY9M.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF",
					url: "https://framerusercontent.com/assets/JeYwfuaPfZHQhEG8U5gtPDZ7WQ.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD",
					url: "https://framerusercontent.com/assets/vQyevYAyHtARFwPqUzQGpnDs.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB",
					url: "https://framerusercontent.com/assets/b6Y37FthZeALduNqHicBT6FutY.woff2",
					weight: "400",
				},
				{
					family: "Figtree",
					source: "google",
					style: "normal",
					url: "https://fonts.gstatic.com/s/figtree/v8/_Xmz-HUzqDCFdgfMsYiV_F7wfS-Bs_dNQF5bwkEU4HTy.woff2",
					weight: "500",
				},
			],
		},
		...WaitlistFonts,
		...getFontsFromSharedStyle(fonts),
		...getFontsFromSharedStyle(fonts3),
		...getFontsFromSharedStyle(fonts2),
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:footer
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"a8d1bf17543235875742a4578f1d6b2cd82ea3d1960d650561752b6f8ce8433b"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default2, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * Renders FooterFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale, ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"a8d1bf17543235875742a4578f1d6b2cd82ea3d1960d650561752b6f8ce8433b"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default2}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default2);
var footer_default = ComponentWithRoot;
export { footer_default as default };
