// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project a8d1bf1754323587 "Xtract Template (copy)", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * title?: string // Title
 * logoVisible?: boolean // Logo Visible
 * background?: string // Background
}} Props

 */

/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */
import { className, css, fonts } from "./chunks/chunk-QY5UAKSC.js";
import { Icon } from "./chunks/chunk-IXDMRUES.js";
import "./chunks/chunk-BVM6H744.js";
import { routes } from "./chunks/chunk-A46GJBWP.js";

// virtual:badge
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framer.com/m/Badge-yUfR.js
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls,
	ComponentViewportProvider,
	ControlType,
	cx,
	getFonts,
	getFontsFromSharedStyle,
	RichText,
	SmartComponentScopedContainer,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
import { useRef } from "react";
var PhosphorFonts = getFonts(Icon);
var serializationHash = "framer-V5EfO";
var variantClassNames = {
	Q1q6mKwFw: "framer-v-1fiq0w",
};
var transition1 = {
	bounce: 0.2,
	delay: 0,
	duration: 0.4,
	type: "spring",
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition = value ?? config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion.create(React.Fragment);
var getProps = ({
	background,
	height,
	id,
	logoVisible,
	title,
	width,
	...props
}) => {
	return {
		...props,
		b5FKc3lDF: title ?? props.b5FKc3lDF ?? "Badge",
		P7WHWvput: background ?? props.P7WHWvput ?? "rgb(13, 13, 13)",
		YKQkMRbk7: logoVisible ?? props.YKQkMRbk7,
	};
};
var createLayoutDependency = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const fallbackRef = useRef(null);
	const refBinding = ref ?? fallbackRef;
	const defaultLayoutId = React.useId();
	const { activeLocale, setLocale } = useLocaleInfo();
	const componentViewport = useComponentViewport();
	const {
		style,
		className: className2,
		layoutId,
		variant,
		b5FKc3lDF,
		YKQkMRbk7,
		P7WHWvput,
		...restProps
	} = getProps(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		defaultVariant: "Q1q6mKwFw",
		ref: refBinding,
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const sharedStyleClassNames = [className];
	const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
	return (
		<LayoutGroup id={layoutId ?? defaultLayoutId}>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<motion.div
						{...restProps}
						{...gestureHandlers}
						className={cx(
							scopingClassNames,
							"framer-1fiq0w",
							className2,
							classNames,
						)}
						data-border={true}
						data-framer-name={"Badge"}
						layoutDependency={layoutDependency}
						layoutId={"Q1q6mKwFw"}
						ref={refBinding}
						style={{
							"--border-bottom-width": "1px",
							"--border-color":
								"var(--token-313dd4d6-9859-4bdd-889b-954a849d13e3, rgb(34, 34, 34))",
							"--border-left-width": "1px",
							"--border-right-width": "1px",
							"--border-style": "solid",
							"--border-top-width": "1px",
							backgroundColor: P7WHWvput,
							borderBottomLeftRadius: 6,
							borderBottomRightRadius: 6,
							borderTopLeftRadius: 6,
							borderTopRightRadius: 6,
							...style,
						}}
					>
						{YKQkMRbk7 && (
							<ComponentViewportProvider>
								<SmartComponentScopedContainer
									className={"framer-a6rrsw-container"}
									isAuthoredByUser={true}
									isModuleExternal={true}
									layoutDependency={layoutDependency}
									layoutId={"YUzdYtwfs-container"}
									nodeId={"YUzdYtwfs"}
									rendersWithMotion={true}
									scopeId={"XXd6HJ3Gc"}
								>
									<Icon
										color={
											"var(--token-a888adc2-3d05-4d6f-88b7-8dab97418795, rgb(129, 74, 200))"
										}
										height={"100%"}
										iconSearch={"sparkle"}
										iconSelection={"House"}
										id={"YUzdYtwfs"}
										layoutId={"YUzdYtwfs"}
										mirrored={false}
										selectByList={false}
										style={{
											height: "100%",
											width: "100%",
										}}
										weight={"fill"}
										width={"100%"}
									/>
								</SmartComponentScopedContainer>
							</ComponentViewportProvider>
						)}
						<RichText
							__fromCanvasComponent={true}
							className={"framer-1s5abq1"}
							fonts={["Inter"]}
							layoutDependency={layoutDependency}
							layoutId={"liyUzpPwR"}
							style={{
								"--framer-link-text-color": "rgb(0, 153, 255)",
								"--framer-link-text-decoration": "underline",
							}}
							text={b5FKc3lDF}
							verticalAlignment={"top"}
							withExternalLayout={true}
						>
							<React.Fragment>
								<motion.p
									className={"framer-styles-preset-x6ge9v"}
									data-styles-preset={"D1fS_zrfW"}
								>
									{"Badge"}
								</motion.p>
							</React.Fragment>
						</RichText>
					</motion.div>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css2 = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-V5EfO.framer-qyu8gw, .framer-V5EfO .framer-qyu8gw { display: block; }",
	".framer-V5EfO.framer-1fiq0w { align-content: center; align-items: center; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 5px; height: min-content; justify-content: center; overflow: hidden; padding: 8px 12px 8px 12px; position: relative; width: min-content; will-change: var(--framer-will-change-override, transform); }",
	".framer-V5EfO .framer-a6rrsw-container { flex: none; height: 15px; position: relative; width: 15px; }",
	".framer-V5EfO .framer-1s5abq1 { flex: none; height: auto; position: relative; white-space: pre; width: auto; }",
	"@supports (background: -webkit-named-image(i)) and (not (font-palette:dark)) { .framer-V5EfO.framer-1fiq0w { gap: 0px; } .framer-V5EfO.framer-1fiq0w > * { margin: 0px; margin-left: calc(5px / 2); margin-right: calc(5px / 2); } .framer-V5EfO.framer-1fiq0w > :first-child { margin-left: 0px; } .framer-V5EfO.framer-1fiq0w > :last-child { margin-right: 0px; } }",
	...css,
	'.framer-V5EfO[data-border="true"]::after, .framer-V5EfO [data-border="true"]::after { content: ""; border-width: var(--border-top-width, 0) var(--border-right-width, 0) var(--border-bottom-width, 0) var(--border-left-width, 0); border-color: var(--border-color, none); border-style: var(--border-style, none); width: 100%; height: 100%; position: absolute; box-sizing: border-box; left: 0; top: 0; border-radius: inherit; pointer-events: none; }',
];
var FramerXXd6HJ3Gc = withCSS(Component, css2, "framer-V5EfO");
var stdin_default = FramerXXd6HJ3Gc;
FramerXXd6HJ3Gc.displayName = "Badge";
FramerXXd6HJ3Gc.defaultProps = {
	height: 33,
	width: 63,
};
addPropertyControls(FramerXXd6HJ3Gc, {
	b5FKc3lDF: {
		defaultValue: "Badge",
		displayTextArea: false,
		title: "Title",
		type: ControlType.String,
	},
	YKQkMRbk7: {
		defaultValue: false,
		title: "Logo Visible",
		type: ControlType.Boolean,
	},
	P7WHWvput: {
		defaultValue: "rgb(13, 13, 13)",
		title: "Background",
		type: ControlType.Color,
	},
});
addFonts(
	FramerXXd6HJ3Gc,
	[
		{
			explicitInter: true,
			fonts: [
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F",
					url: "https://framerusercontent.com/assets/5vvr9Vy74if2I6bQbJvbw7SY1pQ.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116",
					url: "https://framerusercontent.com/assets/EOr0mi4hNtlgWNn9if640EZzXCo.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+1F00-1FFF",
					url: "https://framerusercontent.com/assets/Y9k9QrlZAqio88Klkmbd8VoMQc.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+0370-03FF",
					url: "https://framerusercontent.com/assets/OYrD2tBIBPvoJXiIHnLoOXnY9M.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF",
					url: "https://framerusercontent.com/assets/JeYwfuaPfZHQhEG8U5gtPDZ7WQ.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD",
					url: "https://framerusercontent.com/assets/vQyevYAyHtARFwPqUzQGpnDs.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB",
					url: "https://framerusercontent.com/assets/b6Y37FthZeALduNqHicBT6FutY.woff2",
					weight: "400",
				},
			],
		},
		...PhosphorFonts,
		...getFontsFromSharedStyle(fonts),
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:badge
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"a8d1bf17543235875742a4578f1d6b2cd82ea3d1960d650561752b6f8ce8433b"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * Renders BadgeFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale, ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"a8d1bf17543235875742a4578f1d6b2cd82ea3d1960d650561752b6f8ce8433b"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default);
var badge_default = ComponentWithRoot;
export { badge_default as default };
