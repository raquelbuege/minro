// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project a8d1bf1754323587 "Xtract Template (copy)", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * backdrop?: string // Backdrop
}} Props

 */

/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */
import { routes } from "./chunks/chunk-A46GJBWP.js";

// virtual:particles-background
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framer.com/m/Particles-Background-GAOM.js
import { jsx as _jsx2, jsxs as _jsxs } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls as addPropertyControls2,
	ComponentViewportProvider,
	ControlType as ControlType2,
	cx,
	getFonts,
	SmartComponentScopedContainer,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
import { useRef } from "react";

// /:https://framerusercontent.com/modules/wb6ZrZlCLNQ5HHBJtNND/c1GLxCsQBQvlLXhkz7er/Particles.js
import { jsx as _jsx } from "react/jsx-runtime";
import {
	addPropertyControls,
	ControlType,
	Color,
	RenderTarget,
} from "unframer";
import Particles from "react-tsparticles";
import { loadFull } from "tsparticles";
import { useCallback } from "react";
function ParticleWrapper(props) {
	const {
		background,
		color,
		radius,
		number,
		densityOptions,
		sizeOptions,
		opacityOptions,
		linksOptions,
		modeOptions,
		moveOptions,
		shapeOptions,
		clickOptions,
		hoverOptions,
		rotateOptions,
		particlesID,
		fpsOptions,
		colors,
	} = props;
	const { densityEnable, densityArea, densityFactor } = densityOptions;
	const { linksEnabled, linksColor, linksOpacity, linksDistance, linksWidth } =
		linksOptions;
	const { size, sizeType, sizeMin, sizeMax } = sizeOptions;
	const { opacity, opacityType, opacityMin, opacityMax } = opacityOptions;
	const {
		connectDistance,
		connectRadius,
		connectLinksOpacity,
		grabDistance,
		grabLinksOpacity,
		bubbleDistance,
		bubbleSize,
		bubbleDuration,
		repulseDistance,
		repulseDuration,
		pushQuantity,
		removeQuantity,
		trailQuantity,
		trailDelay,
	} = modeOptions;
	const {
		moveEnabled,
		moveDirection,
		moveSpeed,
		moveRandom,
		moveStraight,
		moveOut,
		moveVibrate,
		moveGravityEnabled,
		moveGravityAcceleration,
		moveGravityMaxSpeed,
		moveTrailEnabled,
		moveTrailAmount,
		moveSpinEnabled,
		moveSpinAcceleration,
		moveAttractEnabled,
		moveAttractDistance,
	} = moveOptions;
	const { shapeType, characterType, imageSource, imageWidth, imageHeight } =
		shapeOptions;
	const { clickEnabled, clickModes } = clickOptions;
	const { hoverEnabled, hoverModes, hoverParallax, hoverForce, hoverSmooth } =
		hoverOptions;
	const {
		rotateDirection,
		rotateValue,
		rotateAnimation,
		rotateSpeed,
		rotateSync,
	} = rotateOptions;
	const particlesInit = useCallback(async (engine) => {
		await loadFull(engine);
	}, []);
	const isCanvas = RenderTarget.current() === RenderTarget.canvas;
	const hasMultipleColors = colors.length > 0;
	return (
		<div
			style={{
				width: "100%",
				height: "100%",
				overflow: "hidden",
				backgroundColor: background,
				transform: "translateZ(0)",
				borderRadius: radius,
				position: "relative",
			}}
		>
			<Particles
				id={particlesID}
				init={particlesInit}
				style={{
					width: "100%",
					height: "100%",
					position: "absolute",
				}}
				options={{
					// autoPlay: !isCanvas,
					background: {
						color: {
							value: "transparent",
						},
					},
					fpsLimit: isCanvas ? 1 : fpsOptions,
					fullScreen: false,
					pauseOnBlur: true,
					pauseOnOutsideViewport: true,
					interactivity: isCanvas
						? {}
						: {
								events: {
									resize: true,
									onClick: {
										enable: isCanvas ? false : clickEnabled,
										mode: clickModes,
									},
									onHover: {
										enable: isCanvas ? false : hoverEnabled,
										mode: hoverModes,
										parallax: {
											enable: isCanvas
												? false
												: hoverEnabled
													? hoverParallax
													: false,
											force: hoverForce,
											smooth: hoverForce,
										},
									},
								},
								modes: {
									connect: {
										distance: connectDistance,
										radius: connectRadius,
										links: {
											opacity: connectLinksOpacity,
										},
									},
									grab: {
										distance: grabDistance,
										links: {
											opacity: grabLinksOpacity,
										},
									},
									bubble: {
										distance: bubbleDistance,
										size: bubbleSize,
										duration: bubbleDuration,
									},
									repulse: {
										distance: repulseDistance,
										duration: repulseDuration,
									},
									push: {
										quantity: pushQuantity,
									},
									remove: {
										quantity: removeQuantity,
									},
									trail: {
										delay: trailDelay,
										quantity: trailQuantity,
									},
								},
							},
					particles: {
						color: {
							value: hasMultipleColors
								? colors.map((color2) => makeHex(color2))
								: makeHex(color),
						},
						collisions: {
							enable: false,
						},
						rotate: {
							direction: rotateDirection,
							value: rotateValue,
							animation: !isCanvas && {
								enable: rotateAnimation,
								speed: rotateSpeed,
							},
						},
						move: {
							direction: moveDirection,
							outMode: moveOut,
							enable: isCanvas ? false : moveEnabled,
							random: moveRandom,
							speed: moveSpeed,
							straight: moveStraight,
							trail: {
								enable: moveTrailEnabled,
								length: moveTrailAmount,
							},
							spin: {
								enable: moveSpinEnabled,
								acceleration: moveSpinAcceleration,
							},
							attract: {
								enable: moveAttractEnabled,
								distance: moveAttractDistance,
							},
							gravity: {
								enable: moveGravityEnabled,
								acceleration: moveGravityAcceleration,
								maxSpeed: moveGravityMaxSpeed,
							},
							vibrate: moveVibrate,
						},
						links: {
							enable: linksEnabled,
							color: makeHex(linksColor),
							opacity: linksOpacity,
							distance: linksDistance,
							width: linksWidth,
						},
						number: {
							value: number,
							density: {
								enable: densityEnable,
								area: densityEnable && densityArea,
								factor: densityEnable && densityFactor,
							},
						},
						opacity: {
							value: opacityType
								? opacity
								: {
										min: opacityMin,
										max: opacityMax,
									},
						},
						shape: {
							type: shapeType,
							character: {
								value: characterType,
							},
							image: {
								src: imageSource,
								width: imageWidth,
								height: imageHeight,
							},
						},
						size: {
							value: sizeType
								? size
								: {
										min: sizeMin,
										max: sizeMax,
									},
						},
					},
					detectRetina: true,
				}}
			/>
		</div>
	);
}
ParticleWrapper.defaultProps = {
	background: "#000000",
	color: "#ffffff",
	radius: 0,
	number: 100,
	densityOptions: {
		densityEnable: false,
		densityArea: 5e3,
		densityFactor: 50,
	},
	sizeOptions: {
		sizeType: true,
		size: 1,
		sizeMin: 1,
		sizeMax: 10,
	},
	opacityOptions: {
		opacityType: true,
		opacity: 1,
		opacityMin: 0,
		opacityMax: 1,
	},
	linksOptions: {
		linksEnabled: false,
		linksColor: "#ffffff",
		linksOpacity: 0.2,
		linksDistance: 100,
		linksWidth: 1,
	},
	modeOptions: {
		connectDistance: 100,
		connectRadius: 50,
		connectLinksOpacity: 0.2,
		grabDistance: 100,
		grabLinksOpacity: 0.2,
		bubbleDistance: 100,
		bubbleSize: 40,
		bubbleDuration: 0.4,
		repulseDistance: 200,
		repulseDuration: 1.2,
		pushQuantity: 4,
		removeQuantity: 4,
		trailDelay: 0.1,
		trailQuantity: 10,
	},
	moveOptions: {
		moveEnabled: true,
		moveDirection: "none",
		moveSpeed: 1,
		moveRandom: false,
		moveStraight: false,
		moveOut: "out",
		moveVibrate: false,
		moveGravityEnabled: false,
		moveGravityAcceleration: 1,
		moveGravityMaxSpeed: 2,
		moveTrailEnabled: false,
		moveTrailAmount: 100,
		moveSpinEnabled: false,
		moveSpinAcceleration: 1,
		moveAttractEnabled: false,
		moveAttractDistance: 100,
	},
	shapeOptions: {
		shapeType: "circle",
		characterType: "\u{1F60E}",
		imageWidth: 100,
		imageHeight: 100,
	},
	clickOptions: {
		clickEnabled: false,
		clickModes: "push",
	},
	hoverOptions: {
		hoverEnabled: true,
		hoverModes: "none",
		hoverParallax: true,
		hoverForce: 10,
		hoverSmooth: 10,
	},
	rotateOptions: {
		rotateDirection: "random",
		rotateValue: 0,
		rotateAnimation: false,
		rotateSpeed: 5,
		rotateSync: false,
	},
	particlesID: "Unique ID",
	colors: [],
};
ParticleWrapper.displayName = "Particles";
addPropertyControls(ParticleWrapper, {
	background: {
		type: ControlType.Color,
		defaultValue: ParticleWrapper.defaultProps.background,
		title: "Backdrop",
	},
	color: {
		type: ControlType.Color,
		defaultValue: ParticleWrapper.defaultProps.color,
		title: "Color",
	},
	colors: {
		type: ControlType.Array,
		control: {
			type: ControlType.Color,
		},
		defaultValue: ParticleWrapper.defaultProps.colors,
	},
	fpsOptions: {
		type: ControlType.Enum,
		title: "FPS",
		options: [30, 60, 120],
		optionTitles: ["30", "60", "120"],
		defaultValue: 60,
		displaySegmentedControl: true,
	},
	number: {
		type: ControlType.Number,
		title: "Amount",
		min: 0,
		max: 1e3,
		step: 1,
		defaultValue: ParticleWrapper.defaultProps.number,
	},
	densityOptions: {
		type: ControlType.Object,
		title: "Density",
		controls: {
			densityEnable: {
				type: ControlType.Boolean,
				title: "Enable",
				defaultValue: ParticleWrapper.defaultProps.densityOptions.densityEnable,
			},
			densityArea: {
				type: ControlType.Number,
				title: "Area",
				min: 100,
				max: 1e4,
				step: 1,
				defaultValue: ParticleWrapper.defaultProps.densityOptions.densityArea,
				hidden: (props) => !props.densityEnable,
			},
			densityFactor: {
				type: ControlType.Number,
				title: "Factor",
				min: 0,
				max: 100,
				step: 0.5,
				displayStepper: true,
				defaultValue: ParticleWrapper.defaultProps.densityOptions.densityFactor,
				description:
					"Decrease the amount property when using these, as too many particles in dense areas can cause slowdowns.",
				hidden: (props) => !props.densityEnable,
			},
		},
	},
	sizeOptions: {
		type: ControlType.Object,
		title: "Size",
		controls: {
			sizeType: {
				type: ControlType.Boolean,
				title: "Type",
				enabledTitle: "Value",
				disabledTitle: "Range",
				defaultValue: ParticleWrapper.defaultProps.sizeOptions.sizeType,
			},
			size: {
				type: ControlType.Number,
				title: "Size",
				min: 0,
				max: 1e3,
				step: 0.5,
				displayStepper: true,
				defaultValue: ParticleWrapper.defaultProps.sizeOptions.size,
				hidden: (props) => !props.sizeType,
			},
			sizeMin: {
				type: ControlType.Number,
				title: "Min",
				min: 0,
				max: 1e3,
				step: 0.5,
				displayStepper: true,
				defaultValue: ParticleWrapper.defaultProps.sizeOptions.sizeMin,
				hidden: (props) => props.sizeType,
			},
			sizeMax: {
				type: ControlType.Number,
				title: "Max",
				min: 0,
				max: 1e3,
				step: 0.5,
				displayStepper: true,
				defaultValue: ParticleWrapper.defaultProps.sizeOptions.sizeMax,
				hidden: (props) => props.sizeType,
			},
		},
	},
	opacityOptions: {
		type: ControlType.Object,
		title: "Opacity",
		controls: {
			opacityType: {
				type: ControlType.Boolean,
				title: "Type",
				enabledTitle: "Value",
				disabledTitle: "Range",
				defaultValue: ParticleWrapper.defaultProps.opacityOptions.opacityType,
			},
			opacity: {
				type: ControlType.Number,
				title: "Opacity",
				min: 0,
				max: 1,
				step: 0.1,
				displayStepper: true,
				defaultValue: ParticleWrapper.defaultProps.opacityOptions.opacity,
				hidden: (props) => !props.opacityType,
			},
			opacityMin: {
				type: ControlType.Number,
				title: "Min",
				min: 0,
				max: 1,
				step: 0.05,
				displayStepper: true,
				defaultValue: ParticleWrapper.defaultProps.opacityOptions.opacityMin,
				hidden: (props) => props.opacityType,
			},
			opacityMax: {
				type: ControlType.Number,
				title: "Max",
				min: 0,
				max: 1,
				step: 0.05,
				displayStepper: true,
				defaultValue: ParticleWrapper.defaultProps.opacityOptions.opacityMax,
				hidden: (props) => props.opacityType,
			},
		},
	},
	linksOptions: {
		type: ControlType.Object,
		title: "Links",
		controls: {
			linksEnabled: {
				type: ControlType.Boolean,
				title: "Enable",
				defaultValue: ParticleWrapper.defaultProps.linksOptions.linksEnabled,
			},
			linksColor: {
				type: ControlType.Color,
				title: "Color",
				defaultValue: ParticleWrapper.defaultProps.linksOptions.linksColor,
				hidden: (props) => !props.linksEnabled,
			},
			linksOpacity: {
				type: ControlType.Number,
				title: "Opacity",
				min: 0,
				max: 1,
				step: 0.1,
				displayStepper: true,
				defaultValue: ParticleWrapper.defaultProps.linksOptions.linksOpacity,
				hidden: (props) => !props.linksEnabled,
			},
			linksDistance: {
				type: ControlType.Number,
				title: "Distance",
				min: 0,
				max: 500,
				step: 1,
				defaultValue: ParticleWrapper.defaultProps.linksOptions.linksDistance,
				hidden: (props) => !props.linksEnabled,
			},
			linksWidth: {
				type: ControlType.Number,
				title: "Width",
				min: 0,
				max: 10,
				step: 1,
				defaultValue: ParticleWrapper.defaultProps.linksOptions.linksWidth,
				hidden: (props) => !props.linksEnabled,
			},
		},
	},
	modeOptions: {
		type: ControlType.Object,
		title: "Modes",
		controls: {
			connectDistance: {
				type: ControlType.Number,
				title: "Connect",
				min: 0,
				max: 1e3,
				step: 1,
				defaultValue: ParticleWrapper.defaultProps.modeOptions.connectDistance,
			},
			connectRadius: {
				type: ControlType.Number,
				title: "Connect Radius",
				min: 0,
				max: 1e3,
				step: 1,
				defaultValue: ParticleWrapper.defaultProps.modeOptions.connectRadius,
			},
			connectLinksOpacity: {
				type: ControlType.Number,
				title: "Connect Links",
				min: 0,
				max: 1,
				step: 0.1,
				displayStepper: true,
				defaultValue:
					ParticleWrapper.defaultProps.modeOptions.connectLinksOpacity,
			},
			grabDistance: {
				type: ControlType.Number,
				title: "Grab",
				min: 0,
				max: 1e3,
				step: 1,
				defaultValue: ParticleWrapper.defaultProps.modeOptions.grabDistance,
			},
			grabLinksOpacity: {
				type: ControlType.Number,
				title: "Grab Links",
				min: 0,
				max: 1,
				step: 0.1,
				displayStepper: true,
				defaultValue: ParticleWrapper.defaultProps.modeOptions.grabLinksOpacity,
			},
			bubbleDistance: {
				type: ControlType.Number,
				title: "Bubble",
				min: 0,
				max: 1e3,
				step: 1,
				defaultValue: ParticleWrapper.defaultProps.modeOptions.bubbleDistance,
			},
			bubbleSize: {
				type: ControlType.Number,
				title: "Bubble Size",
				min: 0,
				max: 1e3,
				step: 1,
				defaultValue: ParticleWrapper.defaultProps.modeOptions.bubbleSize,
			},
			bubbleDuration: {
				type: ControlType.Number,
				title: "Bubble Duration",
				min: 0,
				max: 1,
				step: 0.1,
				displayStepper: true,
				defaultValue: ParticleWrapper.defaultProps.modeOptions.bubbleDuration,
			},
			repulseDistance: {
				type: ControlType.Number,
				title: "Repulse",
				min: 0,
				max: 1e3,
				defaultValue: ParticleWrapper.defaultProps.modeOptions.repulseDistance,
			},
			repulseDuration: {
				type: ControlType.Number,
				title: "Repulse Duration",
				min: 0,
				max: 10,
				step: 0.1,
				displayStepper: true,
				defaultValue: ParticleWrapper.defaultProps.modeOptions.repulseDuration,
			},
			pushQuantity: {
				type: ControlType.Number,
				title: "Push",
				min: 0,
				max: 100,
				step: 1,
				defaultValue: ParticleWrapper.defaultProps.modeOptions.pushQuantity,
			},
			removeQuantity: {
				type: ControlType.Number,
				title: "Remove",
				min: 0,
				max: 100,
				step: 1,
				defaultValue: ParticleWrapper.defaultProps.modeOptions.removeQuantity,
			},
			trailQuantity: {
				type: ControlType.Number,
				title: "Trail",
				min: 0,
				max: 100,
				step: 1,
				defaultValue: ParticleWrapper.defaultProps.modeOptions.trailQuantity,
			},
			trailDelay: {
				type: ControlType.Number,
				title: "Trail Delay",
				min: 0,
				max: 10,
				step: 0.1,
				defaultValue: ParticleWrapper.defaultProps.modeOptions.trailDelay,
			},
		},
	},
	moveOptions: {
		type: ControlType.Object,
		title: "Move",
		controls: {
			moveEnabled: {
				type: ControlType.Boolean,
				title: "Enable",
				defaultValue: ParticleWrapper.defaultProps.moveOptions.moveEnabled,
			},
			moveDirection: {
				type: ControlType.Enum,
				title: "Direction",
				options: [
					"none",
					"bottom",
					"left",
					"right",
					"top",
					"bottom-left",
					"bottom-right",
					"top-left",
					"top-right",
					"outside",
					"inside",
				],
				optionTitles: [
					"Random",
					"Bottom",
					"Left",
					"Right",
					"Top",
					"Bottom Left",
					"Bottom Right",
					"Top Left",
					"Top Right",
					"Outside",
					"Inside",
				],
				defaultValue: ParticleWrapper.defaultProps.moveOptions.moveDirection,
				hidden: (props) => !props.moveEnabled,
			},
			moveSpeed: {
				type: ControlType.Number,
				title: "Speed",
				min: 0,
				max: 100,
				step: 0.1,
				defaultValue: ParticleWrapper.defaultProps.moveOptions.moveSpeed,
				hidden: (props) => !props.moveEnabled,
			},
			moveRandom: {
				type: ControlType.Boolean,
				title: "Random",
				defaultValue: ParticleWrapper.defaultProps.moveOptions.moveRandom,
				hidden: (props) => !props.moveEnabled,
			},
			moveStraight: {
				type: ControlType.Boolean,
				title: "Straight",
				defaultValue: ParticleWrapper.defaultProps.moveOptions.moveStraight,
				hidden: (props) => !props.moveEnabled,
			},
			moveOut: {
				type: ControlType.Enum,
				title: "Out",
				options: [
					"none",
					"split",
					"bounce",
					"destroy",
					"out",
					"bounceHorizontal",
					"bounceVertical",
				],
				optionTitles: [
					"None",
					"Split",
					"Bounce",
					"Destroy",
					"Out",
					"Bounce Horizontal",
					"Bounce Vertical",
				],
				defaultValue: ParticleWrapper.defaultProps.moveOptions.moveOut,
				hidden: (props) => !props.moveEnabled,
			},
			moveVibrate: {
				type: ControlType.Boolean,
				title: "Vibrate",
				defaultValue: ParticleWrapper.defaultProps.moveOptions.moveVibrate,
				hidden: (props) => !props.moveEnabled,
			},
			moveGravityEnabled: {
				type: ControlType.Boolean,
				title: "Gravity",
				defaultValue:
					ParticleWrapper.defaultProps.moveOptions.moveGravityEnabled,
				hidden: (props) => !props.moveEnabled,
			},
			moveGravityAcceleration: {
				type: ControlType.Number,
				title: "Gravity Acceleration",
				min: 0,
				max: 100,
				step: 0.1,
				defaultValue:
					ParticleWrapper.defaultProps.moveOptions.moveGravityAcceleration,
				hidden: (props) => !props.moveEnabled || !props.moveGravityEnabled,
			},
			moveGravityMaxSpeed: {
				type: ControlType.Number,
				title: "Gravity Max Speed",
				min: 0,
				max: 100,
				step: 0.1,
				defaultValue:
					ParticleWrapper.defaultProps.moveOptions.moveGravityAcceleration,
				hidden: (props) => !props.moveEnabled || !props.moveGravityEnabled,
			},
			moveTrailEnabled: {
				type: ControlType.Boolean,
				title: "Trail",
				defaultValue: ParticleWrapper.defaultProps.moveOptions.moveTrailEnabled,
				hidden: (props) => !props.moveEnabled,
			},
			moveTrailAmount: {
				type: ControlType.Number,
				title: " ",
				min: 0,
				max: 1e3,
				step: 1,
				defaultValue: ParticleWrapper.defaultProps.moveOptions.moveTrailAmount,
				hidden: (props) => !props.moveEnabled || !props.moveTrailEnabled,
			},
			moveSpinEnabled: {
				type: ControlType.Boolean,
				title: "Spin",
				defaultValue: ParticleWrapper.defaultProps.moveOptions.moveSpinEnabled,
				hidden: (props) => !props.moveEnabled,
			},
			moveSpinAcceleration: {
				type: ControlType.Number,
				title: " ",
				min: 0,
				max: 1e3,
				step: 1,
				defaultValue:
					ParticleWrapper.defaultProps.moveOptions.moveSpinAcceleration,
				hidden: (props) => !props.moveEnabled || !props.moveSpinEnabled,
			},
			moveAttractEnabled: {
				type: ControlType.Boolean,
				title: "Attract",
				defaultValue:
					ParticleWrapper.defaultProps.moveOptions.moveAttractEnabled,
				hidden: (props) => !props.moveEnabled,
			},
			moveAttractDistance: {
				type: ControlType.Number,
				title: " ",
				min: 0,
				max: 1e3,
				step: 1,
				defaultValue:
					ParticleWrapper.defaultProps.moveOptions.moveAttractDistance,
				hidden: (props) => !props.moveEnabled || !props.moveAttractEnabled,
			},
		},
	},
	shapeOptions: {
		type: ControlType.Object,
		title: "Shape",
		controls: {
			shapeType: {
				type: ControlType.Enum,
				title: "Shape",
				options: [
					"circle",
					"edge",
					"triangle",
					"polygon",
					"star",
					"character",
					"image",
				],
				optionTitles: [
					"Circle",
					"Square",
					"Triangle",
					"Polygon",
					"Star",
					"Character",
					"Image",
				],
				defaultValue: ParticleWrapper.defaultProps.shapeOptions.characterType,
			},
			characterType: {
				type: ControlType.String,
				title: "Character",
				defaultValue: ParticleWrapper.defaultProps.shapeOptions.characterType,
				hidden: (props) => props.shapeType !== "character",
			},
			imageSource: {
				type: ControlType.Image,
				title: "Image",
				hidden: (props) => props.shapeType !== "image",
			},
			imageWidth: {
				type: ControlType.Number,
				title: "Width",
				min: 0,
				max: 1e3,
				defaultValue: ParticleWrapper.defaultProps.shapeOptions.imageWidth,
				hidden: (props) => props.shapeType !== "image",
			},
			imageHeight: {
				type: ControlType.Number,
				title: "Height",
				min: 0,
				max: 1e3,
				defaultValue: ParticleWrapper.defaultProps.shapeOptions.imageWidth,
				hidden: (props) => props.shapeType !== "image",
			},
		},
	},
	clickOptions: {
		type: ControlType.Object,
		title: "Click",
		controls: {
			clickEnabled: {
				type: ControlType.Boolean,
				title: "Enable",
				defaultValue: ParticleWrapper.defaultProps.clickOptions.clickEnabled,
			},
			clickModes: {
				type: ControlType.Enum,
				title: "Mode",
				options: [
					"attract",
					"bubble",
					"push",
					"remove",
					"repulse",
					"pause",
					"trail",
				],
				optionTitles: [
					"Attract",
					"Bubble",
					"Push",
					"Remove",
					"Repulse",
					"Pause",
					"Trail",
				],
				defaultValue: ParticleWrapper.defaultProps.clickOptions.clickModes,
				hidden: (props) => !props.clickEnabled,
			},
		},
	},
	hoverOptions: {
		type: ControlType.Object,
		title: "Hover",
		controls: {
			hoverEnabled: {
				type: ControlType.Boolean,
				title: "Enable",
				defaultValue: ParticleWrapper.defaultProps.hoverOptions.hoverEnabled,
			},
			hoverModes: {
				type: ControlType.Enum,
				title: "Mode",
				options: [
					"none",
					"attract",
					"bounce",
					"bubble",
					"connect",
					"grab",
					"light",
					"repulse",
					"slow",
					"trail",
				],
				optionTitles: [
					"None",
					"Attract",
					"Bounce",
					"Bubble",
					"Connect",
					"Grab",
					"Light",
					"Repulse",
					"Slow",
					"Trail",
				],
				defaultValue: ParticleWrapper.defaultProps.hoverOptions.hoverModes,
				hidden: (props) => !props.hoverEnabled,
			},
			hoverParallax: {
				type: ControlType.Boolean,
				title: "Parallax",
				defaultValue: ParticleWrapper.defaultProps.hoverOptions.hoverParallax,
				hidden: (props) => !props.hoverEnabled,
			},
			hoverForce: {
				type: ControlType.Number,
				min: 0,
				max: 50,
				step: 1,
				displayStepper: true,
				title: "Force",
				defaultValue: ParticleWrapper.defaultProps.hoverOptions.hoverForce,
				hidden: (props) => !props.hoverParallax || !props.hoverEnabled,
			},
			hoverSmooth: {
				type: ControlType.Number,
				min: 0,
				max: 50,
				step: 1,
				displayStepper: true,
				title: "Smooth",
				defaultValue: ParticleWrapper.defaultProps.hoverOptions.hoverSmooth,
				hidden: (props) => !props.hoverParallax || !props.hoverEnabled,
			},
		},
	},
	rotateOptions: {
		type: ControlType.Object,
		title: "Rotate",
		controls: {
			rotateValue: {
				type: ControlType.Number,
				title: "Value",
				min: -360,
				max: 360,
				step: 1,
				displayStepper: true,
				defaultValue: ParticleWrapper.defaultProps.rotateOptions.rotateValue,
			},
			rotateDirection: {
				type: ControlType.Enum,
				title: "Direction",
				options: ["clockwise", "counter-clockwise", "random"],
				optionTitles: ["Clockwise", "Counter Clockwise", "Random"],
				defaultValue:
					ParticleWrapper.defaultProps.rotateOptions.rotateDirection,
			},
			rotateAnimation: {
				type: ControlType.Boolean,
				title: "Animate",
				defaultValue:
					ParticleWrapper.defaultProps.rotateOptions.rotateAnimation,
			},
			rotateSpeed: {
				type: ControlType.Number,
				title: "Speed",
				min: 0,
				max: 100,
				step: 1,
				defaultValue: ParticleWrapper.defaultProps.rotateOptions.rotateSpeed,
				hidden: (props) => !props.rotateAnimation,
			},
			rotateSync: {
				type: ControlType.Boolean,
				title: "Sync",
				defaultValue: ParticleWrapper.defaultProps.rotateOptions.rotateSync,
				hidden: (props) => !props.rotateAnimation,
			},
		},
	},
	radius: {
		type: ControlType.Number,
		min: 0,
		max: 1e3,
		step: 1,
		displayStepper: true,
		defaultValue: ParticleWrapper.defaultProps.radius,
	},
	particlesID: {
		type: ControlType.String,
		title: "ID",
		defaultValue: "One",
		placeholder: ParticleWrapper.defaultProps.particlesID,
	},
});
var makeHex = (property) => Color.toHexString(Color(property));

// /:https://framer.com/m/Particles-Background-GAOM.js
var ParticlesFonts = getFonts(ParticleWrapper);
var serializationHash = "framer-lL6no";
var variantClassNames = {
	RiIgZ5j_u: "framer-v-1wbi9wi",
};
var transition1 = {
	bounce: 0.2,
	delay: 0,
	duration: 0.4,
	type: "spring",
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition = value ?? config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion.create(React.Fragment);
var getProps = ({ backdrop, height, id, width, ...props }) => {
	return {
		...props,
		CDhM3va4w: backdrop ?? props.CDhM3va4w ?? "rgb(0, 0, 0)",
	};
};
var createLayoutDependency = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const fallbackRef = useRef(null);
	const refBinding = ref ?? fallbackRef;
	const defaultLayoutId = React.useId();
	const { activeLocale, setLocale } = useLocaleInfo();
	const componentViewport = useComponentViewport();
	const { style, className, layoutId, variant, CDhM3va4w, ...restProps } =
		getProps(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		defaultVariant: "RiIgZ5j_u",
		ref: refBinding,
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const sharedStyleClassNames = [];
	const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
	return (
		<LayoutGroup id={layoutId ?? defaultLayoutId}>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<motion.div
						{...restProps}
						{...gestureHandlers}
						className={cx(
							scopingClassNames,
							"framer-1wbi9wi",
							className,
							classNames,
						)}
						data-framer-name={"Particles holder"}
						layoutDependency={layoutDependency}
						layoutId={"RiIgZ5j_u"}
						ref={refBinding}
						style={{
							...style,
						}}
					>
						<ComponentViewportProvider>
							<SmartComponentScopedContainer
								className={"framer-134z6np-container"}
								isAuthoredByUser={true}
								isModuleExternal={true}
								layoutDependency={layoutDependency}
								layoutId={"E7XyE4s_q-container"}
								nodeId={"E7XyE4s_q"}
								rendersWithMotion={true}
								scopeId={"VNjVul3QO"}
								style={{
									opacity: 0.5,
								}}
							>
								<ParticleWrapper
									background={CDhM3va4w}
									clickOptions={{
										clickEnabled: false,
										clickModes: "push",
									}}
									color={"rgb(255, 255, 255)"}
									colors={[]}
									densityOptions={{
										densityArea: 5e3,
										densityEnable: false,
										densityFactor: 50,
									}}
									fpsOptions={60}
									height={"100%"}
									hoverOptions={{
										hoverEnabled: false,
										hoverForce: 10,
										hoverModes: "none",
										hoverParallax: false,
										hoverSmooth: 10,
									}}
									id={"E7XyE4s_q"}
									layoutId={"E7XyE4s_q"}
									linksOptions={{
										linksColor: "rgb(255, 255, 255)",
										linksDistance: 100,
										linksEnabled: false,
										linksOpacity: 0.2,
										linksWidth: 1,
									}}
									modeOptions={{
										bubbleDistance: 100,
										bubbleDuration: 0.4,
										bubbleSize: 40,
										connectDistance: 100,
										connectLinksOpacity: 0.2,
										connectRadius: 50,
										grabDistance: 100,
										grabLinksOpacity: 0.2,
										pushQuantity: 4,
										removeQuantity: 4,
										repulseDistance: 200,
										repulseDuration: 1.2,
										trailDelay: 0.1,
										trailQuantity: 10,
									}}
									moveOptions={{
										moveAttractDistance: 100,
										moveAttractEnabled: false,
										moveDirection: "inside",
										moveEnabled: true,
										moveGravityAcceleration: 1,
										moveGravityEnabled: false,
										moveGravityMaxSpeed: 2,
										moveOut: "out",
										moveRandom: false,
										moveSpeed: 0.6,
										moveSpinAcceleration: 1,
										moveSpinEnabled: false,
										moveStraight: false,
										moveTrailAmount: 100,
										moveTrailEnabled: false,
										moveVibrate: false,
									}}
									number={130}
									opacityOptions={{
										opacity: 1,
										opacityMax: 1,
										opacityMin: 0,
										opacityType: true,
									}}
									particlesID={"One"}
									radius={0}
									rotateOptions={{
										rotateAnimation: false,
										rotateDirection: "random",
										rotateSpeed: 5,
										rotateSync: false,
										rotateValue: 0,
									}}
									shapeOptions={{
										characterType: "\u{1F60E}",
										imageHeight: 100,
										imageWidth: 100,
										shapeType: "circle",
									}}
									sizeOptions={{
										size: 0.9,
										sizeMax: 2,
										sizeMin: 1,
										sizeType: true,
									}}
									style={{
										height: "100%",
										width: "100%",
									}}
									width={"100%"}
								/>
							</SmartComponentScopedContainer>
						</ComponentViewportProvider>
						<motion.div
							className={"framer-1wt1rzf"}
							data-framer-name={"Void"}
							layoutDependency={layoutDependency}
							layoutId={"KxihkuBsS"}
							style={{
								backgroundColor:
									"var(--token-aae92d1e-1be4-447e-8038-565c6944f982, rgb(0, 0, 0))",
								borderBottomLeftRadius: 296,
								borderBottomRightRadius: 296,
								borderTopLeftRadius: 296,
								borderTopRightRadius: 296,
							}}
						/>
					</motion.div>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-lL6no.framer-rp3ue3, .framer-lL6no .framer-rp3ue3 { display: block; }",
	".framer-lL6no.framer-1wbi9wi { align-content: center; align-items: center; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: 736px; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: 1200px; }",
	".framer-lL6no .framer-134z6np-container { flex: 1 0 0px; height: 100%; position: relative; width: 1px; z-index: 0; }",
	".framer-lL6no .framer-1wt1rzf { flex: none; height: 410px; left: calc(50.00000000000002% - 410px / 2); overflow: visible; position: absolute; top: calc(50.00000000000002% - 410px / 2); width: 410px; z-index: 1; }",
	"@supports (background: -webkit-named-image(i)) and (not (font-palette:dark)) { .framer-lL6no.framer-1wbi9wi { gap: 0px; } .framer-lL6no.framer-1wbi9wi > * { margin: 0px; margin-left: calc(10px / 2); margin-right: calc(10px / 2); } .framer-lL6no.framer-1wbi9wi > :first-child { margin-left: 0px; } .framer-lL6no.framer-1wbi9wi > :last-child { margin-right: 0px; } }",
];
var FramerVNjVul3QO = withCSS(Component, css, "framer-lL6no");
var stdin_default = FramerVNjVul3QO;
FramerVNjVul3QO.displayName = "Particles Background";
FramerVNjVul3QO.defaultProps = {
	height: 736,
	width: 1200,
};
addPropertyControls2(FramerVNjVul3QO, {
	CDhM3va4w: {
		defaultValue: "rgb(0, 0, 0)",
		title: "Backdrop",
		type: ControlType2.Color,
	},
});
addFonts(
	FramerVNjVul3QO,
	[
		{
			explicitInter: true,
			fonts: [],
		},
		...ParticlesFonts,
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:particles-background
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"a8d1bf17543235875742a4578f1d6b2cd82ea3d1960d650561752b6f8ce8433b"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * Renders ParticlesBackgroundFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale, ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"a8d1bf17543235875742a4578f1d6b2cd82ea3d1960d650561752b6f8ce8433b"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default);
var particles_background_default = ComponentWithRoot;
export { particles_background_default as default };
